(()=>{var e,t,r,n,o,i,a,c={1935:(e,t,r)=>{"use strict";function n(e,t,r,n,o,i,a){try{var c=e[i](a),u=c.value}catch(e){return void r(e)}c.done?t(u):Promise.resolve(u).then(n,o)}function o(e){return function(){var t=this,r=arguments;return new Promise((function(o,i){var a=e.apply(t,r);function c(e){n(a,o,i,c,u,"next",e)}function u(e){n(a,o,i,c,u,"throw",e)}c(void 0)}))}}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}r(8177),r(2526),r(1817),r(2222),r(9554),r(8309),r(4747),r(5666),new(function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.gui=t,this.tickets=null,this.url="https://ahj-http-back.herokuapp.com",this.modalSubmit=this.modalSubmit.bind(this),this.modalReset=this.modalReset.bind(this)}var t,r,n,a,c,u,s;return t=e,(r=[{key:"init",value:function(){var e=this;this.getTickets(),this.gui.widget.addEventListener("click",(function(t){t.preventDefault(),"edit"===t.target.dataset.id?e.editTicket(t):"del"===t.target.dataset.id?e.delTicket(t):"title"===t.target.dataset.id?e.showDescription(t):"add"===t.target.dataset.id&&e.addTicket(t)}))}},{key:"sendXHR",value:(s=o(regeneratorRuntime.mark((function e(t,r,n){var o,i,a,c;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return o=new XMLHttpRequest,"GET"===t?(i="".concat(this.url,"?method=").concat(r),o.open(t,i,!1),o.send()):"POST"===t?(a="".concat(this.url,"?method=").concat(n),o.open(t,a,!1),o.send(r)):"DELETE"===t&&(c="".concat(this.url,"?method=deleteTicket&id=").concat(r),o.open(t,c,!1),o.send()),e.abrupt("return",o.responseText);case 3:case"end":return e.stop()}}),e,this)}))),function(e,t,r){return s.apply(this,arguments)})},{key:"modalSubmit",value:(u=o(regeneratorRuntime.mark((function e(t){var r,n,o,i,a,c;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.preventDefault(),r=t.target.name,n=t.target.dataset.idfor,"edit"!==r){e.next=10;break}return(o=new FormData(document.forms[1])).append("id",n),e.next=8,this.sendXHR("POST",o,"editTicket");case 8:e.next=23;break;case 10:if("del"!==r){e.next=15;break}i=n,this.sendXHR("DELETE",i),e.next=23;break;case 15:if("createTicket"!==r){e.next=23;break}return a=new FormData(document.forms[1]),e.t0=JSON,e.next=20,this.sendXHR("POST",a,"createTicket");case 20:e.t1=e.sent,c=e.t0.parse.call(e.t0,e.t1),this.gui.list.innerHTML+=this.gui.rowTemplate(c.id,c.status,c.name,c.created);case 23:return this.getTickets(),this.gui.modal.removeEventListener("submit",this.modalSubmit),e.next=27,this.gui.modal.classList.add("hidden");case 27:case"end":return e.stop()}}),e,this)}))),function(e){return u.apply(this,arguments)})},{key:"modalReset",value:function(e){e.preventDefault(),this.gui.modal.classList.add("hidden"),this.gui.modal.removeEventListener("reset",this.modalReset)}},{key:"delTicket",value:function(e){var t=e.target.closest(".row").dataset.id;this.gui.modal.classList.remove("hidden"),this.gui.modal.innerHTML=this.gui.delTemplate(t),this.gui.modal.addEventListener("submit",this.modalSubmit),this.gui.modal.addEventListener("reset",this.modalReset)}},{key:"addTicket",value:function(){this.gui.modal.classList.remove("hidden"),this.gui.modal.innerHTML=this.gui.editTemplate("Добавить тикет","","","createTicket"),this.gui.modal.addEventListener("submit",this.modalSubmit),this.gui.modal.addEventListener("reset",this.modalReset)}},{key:"showDescription",value:(c=o(regeneratorRuntime.mark((function e(t){var r,n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.target.children[0]){e.next=10;break}return r=t.target.parentElement.dataset.id,e.t0=JSON,e.next=5,this.sendXHR("GET","ticketById&id=".concat(r));case 5:e.t1=e.sent,n=e.t0.parse.call(e.t0,e.t1),t.target.innerHTML+=this.gui.descriptionTemplate(n.description),e.next=11;break;case 10:t.target.removeChild(t.target.children[0]);case 11:case"end":return e.stop()}}),e,this)}))),function(e){return c.apply(this,arguments)})},{key:"editTicket",value:(a=o(regeneratorRuntime.mark((function e(t){var r,n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return this.gui.modal.classList.remove("hidden"),r=t.target.closest(".row").dataset.id,e.t0=JSON,e.next=5,this.sendXHR("GET","ticketById&id=".concat(r));case 5:e.t1=e.sent,n=e.t0.parse.call(e.t0,e.t1),this.gui.modal.innerHTML=this.gui.editTemplate("Изменить тикет",n.name,n.description,"edit",r),this.gui.modal.addEventListener("submit",this.modalSubmit),this.gui.modal.addEventListener("reset",this.modalReset);case 10:case"end":return e.stop()}}),e,this)}))),function(e){return a.apply(this,arguments)})},{key:"getTickets",value:(n=o(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.t0=JSON,e.next=3,this.sendXHR("GET","allTickets");case 3:e.t1=e.sent,t=e.t0.parse.call(e.t0,e.t1),this.tickets=t,this.fillFields(this.tickets);case 7:case"end":return e.stop()}}),e,this)}))),function(){return n.apply(this,arguments)})},{key:"fillFields",value:function(e){var t=this;this.gui.list.innerHTML="",e.forEach((function(e){t.gui.list.innerHTML+=t.gui.rowTemplate(e.id,e.status,e.name,e.created)}))}}])&&i(t.prototype,r),e}())(new(function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.status=document.querySelector("[data-id=status]"),this.title=document.querySelector("[data-id=title]"),this.data=document.querySelector("[data-id=data]"),this.list=document.querySelector(".list"),this.modal=document.querySelector(".modal"),this.widget=document.querySelector(".ticketswidget")}var t,r;return t=e,(r=[{key:"rowTemplate",value:function(e,t,r,n){return'\n    <div class="row" data-id="'.concat(e,'">\n      <div data-id="status">').concat(t,'</div>\n      <div data-id="title" class="title">').concat(r,'</div>\n      <div data-id="data" class="date">').concat(n,'</div>\n      <div><button data-id="edit">edit</button></div>\n      <div><button data-id="del">del</button></div>\n    </div>')}},{key:"editTemplate",value:function(e,t,r,n,o){return"\n    <form name=".concat(n,' data-idfor="').concat(o,'">\n      <h3>').concat(e,'</h3>\n      Краткое описание <input type="text" name="title" value="').concat(t,'"><br>\n      Подробное описание <input type="text" name="description" value="').concat(r,'"><br>\n      <button type="reset">Отмена</button>\n      <button type="submit">Ок</button>\n    </form>\n      ')}},{key:"descriptionTemplate",value:function(e){return"\n    <p>".concat(e,"</p>\n    ")}},{key:"delTemplate",value:function(e){return'\n    <form name="del" data-idfor='.concat(e,'>\n      <h3>Удалить тикет</h3>\n      <p>Are you sure? It\'s can\'t be cancelled.</p>\n      <button type="reset">Отмена</button>\n      <button type="submit">Ок</button>\n    </form>\n    ')}}])&&a(t.prototype,r),e}())).init(),r(7436)},3099:e=>{e.exports=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e}},9670:(e,t,r)=>{var n=r(111);e.exports=function(e){if(!n(e))throw TypeError(String(e)+" is not an object");return e}},8533:(e,t,r)=>{"use strict";var n=r(2092).forEach,o=r(9341),i=r(9207),a=o("forEach"),c=i("forEach");e.exports=a&&c?[].forEach:function(e){return n(this,e,arguments.length>1?arguments[1]:void 0)}},1318:(e,t,r)=>{var n=r(5656),o=r(7466),i=r(1400),a=function(e){return function(t,r,a){var c,u=n(t),s=o(u.length),l=i(a,s);if(e&&r!=r){for(;s>l;)if((c=u[l++])!=c)return!0}else for(;s>l;l++)if((e||l in u)&&u[l]===r)return e||l||0;return!e&&-1}};e.exports={includes:a(!0),indexOf:a(!1)}},2092:(e,t,r)=>{var n=r(9974),o=r(8361),i=r(7908),a=r(7466),c=r(5417),u=[].push,s=function(e){var t=1==e,r=2==e,s=3==e,l=4==e,f=6==e,d=7==e,p=5==e||f;return function(h,v,m,y){for(var g,b,w=i(h),x=o(w),S=n(v,m,3),E=a(x.length),O=0,k=y||c,L=t?k(h,E):r||d?k(h,0):void 0;E>O;O++)if((p||O in x)&&(b=S(g=x[O],O,w),e))if(t)L[O]=b;else if(b)switch(e){case 3:return!0;case 5:return g;case 6:return O;case 2:u.call(L,g)}else switch(e){case 4:return!1;case 7:u.call(L,g)}return f?-1:s||l?l:L}};e.exports={forEach:s(0),map:s(1),filter:s(2),some:s(3),every:s(4),find:s(5),findIndex:s(6),filterOut:s(7)}},1194:(e,t,r)=>{var n=r(7293),o=r(5112),i=r(7392),a=o("species");e.exports=function(e){return i>=51||!n((function(){var t=[];return(t.constructor={})[a]=function(){return{foo:1}},1!==t[e](Boolean).foo}))}},9341:(e,t,r)=>{"use strict";var n=r(7293);e.exports=function(e,t){var r=[][e];return!!r&&n((function(){r.call(null,t||function(){throw 1},1)}))}},9207:(e,t,r)=>{var n=r(9781),o=r(7293),i=r(6656),a=Object.defineProperty,c={},u=function(e){throw e};e.exports=function(e,t){if(i(c,e))return c[e];t||(t={});var r=[][e],s=!!i(t,"ACCESSORS")&&t.ACCESSORS,l=i(t,0)?t[0]:u,f=i(t,1)?t[1]:void 0;return c[e]=!!r&&!o((function(){if(s&&!n)return!0;var e={length:-1};s?a(e,1,{enumerable:!0,get:u}):e[1]=1,r.call(e,l,f)}))}},5417:(e,t,r)=>{var n=r(111),o=r(3157),i=r(5112)("species");e.exports=function(e,t){var r;return o(e)&&("function"!=typeof(r=e.constructor)||r!==Array&&!o(r.prototype)?n(r)&&null===(r=r[i])&&(r=void 0):r=void 0),new(void 0===r?Array:r)(0===t?0:t)}},4326:e=>{var t={}.toString;e.exports=function(e){return t.call(e).slice(8,-1)}},9920:(e,t,r)=>{var n=r(6656),o=r(3887),i=r(1236),a=r(3070);e.exports=function(e,t){for(var r=o(t),c=a.f,u=i.f,s=0;s<r.length;s++){var l=r[s];n(e,l)||c(e,l,u(t,l))}}},8880:(e,t,r)=>{var n=r(9781),o=r(3070),i=r(9114);e.exports=n?function(e,t,r){return o.f(e,t,i(1,r))}:function(e,t,r){return e[t]=r,e}},9114:e=>{e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},6135:(e,t,r)=>{"use strict";var n=r(7593),o=r(3070),i=r(9114);e.exports=function(e,t,r){var a=n(t);a in e?o.f(e,a,i(0,r)):e[a]=r}},7235:(e,t,r)=>{var n=r(857),o=r(6656),i=r(6061),a=r(3070).f;e.exports=function(e){var t=n.Symbol||(n.Symbol={});o(t,e)||a(t,e,{value:i.f(e)})}},9781:(e,t,r)=>{var n=r(7293);e.exports=!n((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},317:(e,t,r)=>{var n=r(7854),o=r(111),i=n.document,a=o(i)&&o(i.createElement);e.exports=function(e){return a?i.createElement(e):{}}},8324:e=>{e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},8113:(e,t,r)=>{var n=r(5005);e.exports=n("navigator","userAgent")||""},7392:(e,t,r)=>{var n,o,i=r(7854),a=r(8113),c=i.process,u=c&&c.versions,s=u&&u.v8;s?o=(n=s.split("."))[0]+n[1]:a&&(!(n=a.match(/Edge\/(\d+)/))||n[1]>=74)&&(n=a.match(/Chrome\/(\d+)/))&&(o=n[1]),e.exports=o&&+o},748:e=>{e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},2109:(e,t,r)=>{var n=r(7854),o=r(1236).f,i=r(8880),a=r(1320),c=r(3505),u=r(9920),s=r(4705);e.exports=function(e,t){var r,l,f,d,p,h=e.target,v=e.global,m=e.stat;if(r=v?n:m?n[h]||c(h,{}):(n[h]||{}).prototype)for(l in t){if(d=t[l],f=e.noTargetGet?(p=o(r,l))&&p.value:r[l],!s(v?l:h+(m?".":"#")+l,e.forced)&&void 0!==f){if(typeof d==typeof f)continue;u(d,f)}(e.sham||f&&f.sham)&&i(d,"sham",!0),a(r,l,d,e)}}},7293:e=>{e.exports=function(e){try{return!!e()}catch(e){return!0}}},9974:(e,t,r)=>{var n=r(3099);e.exports=function(e,t,r){if(n(e),void 0===t)return e;switch(r){case 0:return function(){return e.call(t)};case 1:return function(r){return e.call(t,r)};case 2:return function(r,n){return e.call(t,r,n)};case 3:return function(r,n,o){return e.call(t,r,n,o)}}return function(){return e.apply(t,arguments)}}},5005:(e,t,r)=>{var n=r(857),o=r(7854),i=function(e){return"function"==typeof e?e:void 0};e.exports=function(e,t){return arguments.length<2?i(n[e])||i(o[e]):n[e]&&n[e][t]||o[e]&&o[e][t]}},7854:(e,t,r)=>{var n=function(e){return e&&e.Math==Math&&e};e.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof r.g&&r.g)||function(){return this}()||Function("return this")()},6656:e=>{var t={}.hasOwnProperty;e.exports=function(e,r){return t.call(e,r)}},3501:e=>{e.exports={}},490:(e,t,r)=>{var n=r(5005);e.exports=n("document","documentElement")},4664:(e,t,r)=>{var n=r(9781),o=r(7293),i=r(317);e.exports=!n&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},8361:(e,t,r)=>{var n=r(7293),o=r(4326),i="".split;e.exports=n((function(){return!Object("z").propertyIsEnumerable(0)}))?function(e){return"String"==o(e)?i.call(e,""):Object(e)}:Object},2788:(e,t,r)=>{var n=r(5465),o=Function.toString;"function"!=typeof n.inspectSource&&(n.inspectSource=function(e){return o.call(e)}),e.exports=n.inspectSource},9909:(e,t,r)=>{var n,o,i,a=r(8536),c=r(7854),u=r(111),s=r(8880),l=r(6656),f=r(5465),d=r(6200),p=r(3501),h=c.WeakMap;if(a){var v=f.state||(f.state=new h),m=v.get,y=v.has,g=v.set;n=function(e,t){return t.facade=e,g.call(v,e,t),t},o=function(e){return m.call(v,e)||{}},i=function(e){return y.call(v,e)}}else{var b=d("state");p[b]=!0,n=function(e,t){return t.facade=e,s(e,b,t),t},o=function(e){return l(e,b)?e[b]:{}},i=function(e){return l(e,b)}}e.exports={set:n,get:o,has:i,enforce:function(e){return i(e)?o(e):n(e,{})},getterFor:function(e){return function(t){var r;if(!u(t)||(r=o(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return r}}}},3157:(e,t,r)=>{var n=r(4326);e.exports=Array.isArray||function(e){return"Array"==n(e)}},4705:(e,t,r)=>{var n=r(7293),o=/#|\.prototype\./,i=function(e,t){var r=c[a(e)];return r==s||r!=u&&("function"==typeof t?n(t):!!t)},a=i.normalize=function(e){return String(e).replace(o,".").toLowerCase()},c=i.data={},u=i.NATIVE="N",s=i.POLYFILL="P";e.exports=i},111:e=>{e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},1913:e=>{e.exports=!1},133:(e,t,r)=>{var n=r(7293);e.exports=!!Object.getOwnPropertySymbols&&!n((function(){return!String(Symbol())}))},8536:(e,t,r)=>{var n=r(7854),o=r(2788),i=n.WeakMap;e.exports="function"==typeof i&&/native code/.test(o(i))},30:(e,t,r)=>{var n,o=r(9670),i=r(6048),a=r(748),c=r(3501),u=r(490),s=r(317),l=r(6200)("IE_PROTO"),f=function(){},d=function(e){return"<script>"+e+"<\/script>"},p=function(){try{n=document.domain&&new ActiveXObject("htmlfile")}catch(e){}var e,t;p=n?function(e){e.write(d("")),e.close();var t=e.parentWindow.Object;return e=null,t}(n):((t=s("iframe")).style.display="none",u.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(d("document.F=Object")),e.close(),e.F);for(var r=a.length;r--;)delete p.prototype[a[r]];return p()};c[l]=!0,e.exports=Object.create||function(e,t){var r;return null!==e?(f.prototype=o(e),r=new f,f.prototype=null,r[l]=e):r=p(),void 0===t?r:i(r,t)}},6048:(e,t,r)=>{var n=r(9781),o=r(3070),i=r(9670),a=r(1956);e.exports=n?Object.defineProperties:function(e,t){i(e);for(var r,n=a(t),c=n.length,u=0;c>u;)o.f(e,r=n[u++],t[r]);return e}},3070:(e,t,r)=>{var n=r(9781),o=r(4664),i=r(9670),a=r(7593),c=Object.defineProperty;t.f=n?c:function(e,t,r){if(i(e),t=a(t,!0),i(r),o)try{return c(e,t,r)}catch(e){}if("get"in r||"set"in r)throw TypeError("Accessors not supported");return"value"in r&&(e[t]=r.value),e}},1236:(e,t,r)=>{var n=r(9781),o=r(5296),i=r(9114),a=r(5656),c=r(7593),u=r(6656),s=r(4664),l=Object.getOwnPropertyDescriptor;t.f=n?l:function(e,t){if(e=a(e),t=c(t,!0),s)try{return l(e,t)}catch(e){}if(u(e,t))return i(!o.f.call(e,t),e[t])}},1156:(e,t,r)=>{var n=r(5656),o=r(8006).f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return a&&"[object Window]"==i.call(e)?function(e){try{return o(e)}catch(e){return a.slice()}}(e):o(n(e))}},8006:(e,t,r)=>{var n=r(6324),o=r(748).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return n(e,o)}},5181:(e,t)=>{t.f=Object.getOwnPropertySymbols},6324:(e,t,r)=>{var n=r(6656),o=r(5656),i=r(1318).indexOf,a=r(3501);e.exports=function(e,t){var r,c=o(e),u=0,s=[];for(r in c)!n(a,r)&&n(c,r)&&s.push(r);for(;t.length>u;)n(c,r=t[u++])&&(~i(s,r)||s.push(r));return s}},1956:(e,t,r)=>{var n=r(6324),o=r(748);e.exports=Object.keys||function(e){return n(e,o)}},5296:(e,t)=>{"use strict";var r={}.propertyIsEnumerable,n=Object.getOwnPropertyDescriptor,o=n&&!r.call({1:2},1);t.f=o?function(e){var t=n(this,e);return!!t&&t.enumerable}:r},3887:(e,t,r)=>{var n=r(5005),o=r(8006),i=r(5181),a=r(9670);e.exports=n("Reflect","ownKeys")||function(e){var t=o.f(a(e)),r=i.f;return r?t.concat(r(e)):t}},857:(e,t,r)=>{var n=r(7854);e.exports=n},1320:(e,t,r)=>{var n=r(7854),o=r(8880),i=r(6656),a=r(3505),c=r(2788),u=r(9909),s=u.get,l=u.enforce,f=String(String).split("String");(e.exports=function(e,t,r,c){var u,s=!!c&&!!c.unsafe,d=!!c&&!!c.enumerable,p=!!c&&!!c.noTargetGet;"function"==typeof r&&("string"!=typeof t||i(r,"name")||o(r,"name",t),(u=l(r)).source||(u.source=f.join("string"==typeof t?t:""))),e!==n?(s?!p&&e[t]&&(d=!0):delete e[t],d?e[t]=r:o(e,t,r)):d?e[t]=r:a(t,r)})(Function.prototype,"toString",(function(){return"function"==typeof this&&s(this).source||c(this)}))},4488:e=>{e.exports=function(e){if(null==e)throw TypeError("Can't call method on "+e);return e}},3505:(e,t,r)=>{var n=r(7854),o=r(8880);e.exports=function(e,t){try{o(n,e,t)}catch(r){n[e]=t}return t}},8003:(e,t,r)=>{var n=r(3070).f,o=r(6656),i=r(5112)("toStringTag");e.exports=function(e,t,r){e&&!o(e=r?e:e.prototype,i)&&n(e,i,{configurable:!0,value:t})}},6200:(e,t,r)=>{var n=r(2309),o=r(9711),i=n("keys");e.exports=function(e){return i[e]||(i[e]=o(e))}},5465:(e,t,r)=>{var n=r(7854),o=r(3505),i="__core-js_shared__",a=n[i]||o(i,{});e.exports=a},2309:(e,t,r)=>{var n=r(1913),o=r(5465);(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.8.2",mode:n?"pure":"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})},1400:(e,t,r)=>{var n=r(9958),o=Math.max,i=Math.min;e.exports=function(e,t){var r=n(e);return r<0?o(r+t,0):i(r,t)}},5656:(e,t,r)=>{var n=r(8361),o=r(4488);e.exports=function(e){return n(o(e))}},9958:e=>{var t=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:t)(e)}},7466:(e,t,r)=>{var n=r(9958),o=Math.min;e.exports=function(e){return e>0?o(n(e),9007199254740991):0}},7908:(e,t,r)=>{var n=r(4488);e.exports=function(e){return Object(n(e))}},7593:(e,t,r)=>{var n=r(111);e.exports=function(e,t){if(!n(e))return e;var r,o;if(t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;if("function"==typeof(r=e.valueOf)&&!n(o=r.call(e)))return o;if(!t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},9711:e=>{var t=0,r=Math.random();e.exports=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++t+r).toString(36)}},3307:(e,t,r)=>{var n=r(133);e.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},6061:(e,t,r)=>{var n=r(5112);t.f=n},5112:(e,t,r)=>{var n=r(7854),o=r(2309),i=r(6656),a=r(9711),c=r(133),u=r(3307),s=o("wks"),l=n.Symbol,f=u?l:l&&l.withoutSetter||a;e.exports=function(e){return i(s,e)||(c&&i(l,e)?s[e]=l[e]:s[e]=f("Symbol."+e)),s[e]}},2222:(e,t,r)=>{"use strict";var n=r(2109),o=r(7293),i=r(3157),a=r(111),c=r(7908),u=r(7466),s=r(6135),l=r(5417),f=r(1194),d=r(5112),p=r(7392),h=d("isConcatSpreadable"),v=9007199254740991,m="Maximum allowed index exceeded",y=p>=51||!o((function(){var e=[];return e[h]=!1,e.concat()[0]!==e})),g=f("concat"),b=function(e){if(!a(e))return!1;var t=e[h];return void 0!==t?!!t:i(e)};n({target:"Array",proto:!0,forced:!y||!g},{concat:function(e){var t,r,n,o,i,a=c(this),f=l(a,0),d=0;for(t=-1,n=arguments.length;t<n;t++)if(b(i=-1===t?a:arguments[t])){if(d+(o=u(i.length))>v)throw TypeError(m);for(r=0;r<o;r++,d++)r in i&&s(f,d,i[r])}else{if(d>=v)throw TypeError(m);s(f,d++,i)}return f.length=d,f}})},9554:(e,t,r)=>{"use strict";var n=r(2109),o=r(8533);n({target:"Array",proto:!0,forced:[].forEach!=o},{forEach:o})},8309:(e,t,r)=>{var n=r(9781),o=r(3070).f,i=Function.prototype,a=i.toString,c=/^\s*function ([^ (]*)/,u="name";n&&!(u in i)&&o(i,u,{configurable:!0,get:function(){try{return a.call(this).match(c)[1]}catch(e){return""}}})},1817:(e,t,r)=>{"use strict";var n=r(2109),o=r(9781),i=r(7854),a=r(6656),c=r(111),u=r(3070).f,s=r(9920),l=i.Symbol;if(o&&"function"==typeof l&&(!("description"in l.prototype)||void 0!==l().description)){var f={},d=function(){var e=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),t=this instanceof d?new l(e):void 0===e?l():l(e);return""===e&&(f[t]=!0),t};s(d,l);var p=d.prototype=l.prototype;p.constructor=d;var h=p.toString,v="Symbol(test)"==String(l("test")),m=/^Symbol\((.*)\)[^)]+$/;u(p,"description",{configurable:!0,get:function(){var e=c(this)?this.valueOf():this,t=h.call(e);if(a(f,e))return"";var r=v?t.slice(7,-1):t.replace(m,"$1");return""===r?void 0:r}}),n({global:!0,forced:!0},{Symbol:d})}},2526:(e,t,r)=>{"use strict";var n=r(2109),o=r(7854),i=r(5005),a=r(1913),c=r(9781),u=r(133),s=r(3307),l=r(7293),f=r(6656),d=r(3157),p=r(111),h=r(9670),v=r(7908),m=r(5656),y=r(7593),g=r(9114),b=r(30),w=r(1956),x=r(8006),S=r(1156),E=r(5181),O=r(1236),k=r(3070),L=r(5296),T=r(8880),j=r(1320),P=r(2309),_=r(6200),D=r(3501),R=r(9711),A=r(5112),I=r(6061),N=r(7235),C=r(8003),H=r(9909),M=r(2092).forEach,F=_("hidden"),q="Symbol",G=A("toPrimitive"),B=H.set,X=H.getterFor(q),V=Object.prototype,W=o.Symbol,$=i("JSON","stringify"),U=O.f,J=k.f,z=S.f,Y=L.f,K=P("symbols"),Q=P("op-symbols"),Z=P("string-to-symbol-registry"),ee=P("symbol-to-string-registry"),te=P("wks"),re=o.QObject,ne=!re||!re.prototype||!re.prototype.findChild,oe=c&&l((function(){return 7!=b(J({},"a",{get:function(){return J(this,"a",{value:7}).a}})).a}))?function(e,t,r){var n=U(V,t);n&&delete V[t],J(e,t,r),n&&e!==V&&J(V,t,n)}:J,ie=function(e,t){var r=K[e]=b(W.prototype);return B(r,{type:q,tag:e,description:t}),c||(r.description=t),r},ae=s?function(e){return"symbol"==typeof e}:function(e){return Object(e)instanceof W},ce=function(e,t,r){e===V&&ce(Q,t,r),h(e);var n=y(t,!0);return h(r),f(K,n)?(r.enumerable?(f(e,F)&&e[F][n]&&(e[F][n]=!1),r=b(r,{enumerable:g(0,!1)})):(f(e,F)||J(e,F,g(1,{})),e[F][n]=!0),oe(e,n,r)):J(e,n,r)},ue=function(e,t){h(e);var r=m(t),n=w(r).concat(de(r));return M(n,(function(t){c&&!se.call(r,t)||ce(e,t,r[t])})),e},se=function(e){var t=y(e,!0),r=Y.call(this,t);return!(this===V&&f(K,t)&&!f(Q,t))&&(!(r||!f(this,t)||!f(K,t)||f(this,F)&&this[F][t])||r)},le=function(e,t){var r=m(e),n=y(t,!0);if(r!==V||!f(K,n)||f(Q,n)){var o=U(r,n);return!o||!f(K,n)||f(r,F)&&r[F][n]||(o.enumerable=!0),o}},fe=function(e){var t=z(m(e)),r=[];return M(t,(function(e){f(K,e)||f(D,e)||r.push(e)})),r},de=function(e){var t=e===V,r=z(t?Q:m(e)),n=[];return M(r,(function(e){!f(K,e)||t&&!f(V,e)||n.push(K[e])})),n};u||(j((W=function(){if(this instanceof W)throw TypeError("Symbol is not a constructor");var e=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,t=R(e),r=function(e){this===V&&r.call(Q,e),f(this,F)&&f(this[F],t)&&(this[F][t]=!1),oe(this,t,g(1,e))};return c&&ne&&oe(V,t,{configurable:!0,set:r}),ie(t,e)}).prototype,"toString",(function(){return X(this).tag})),j(W,"withoutSetter",(function(e){return ie(R(e),e)})),L.f=se,k.f=ce,O.f=le,x.f=S.f=fe,E.f=de,I.f=function(e){return ie(A(e),e)},c&&(J(W.prototype,"description",{configurable:!0,get:function(){return X(this).description}}),a||j(V,"propertyIsEnumerable",se,{unsafe:!0}))),n({global:!0,wrap:!0,forced:!u,sham:!u},{Symbol:W}),M(w(te),(function(e){N(e)})),n({target:q,stat:!0,forced:!u},{for:function(e){var t=String(e);if(f(Z,t))return Z[t];var r=W(t);return Z[t]=r,ee[r]=t,r},keyFor:function(e){if(!ae(e))throw TypeError(e+" is not a symbol");if(f(ee,e))return ee[e]},useSetter:function(){ne=!0},useSimple:function(){ne=!1}}),n({target:"Object",stat:!0,forced:!u,sham:!c},{create:function(e,t){return void 0===t?b(e):ue(b(e),t)},defineProperty:ce,defineProperties:ue,getOwnPropertyDescriptor:le}),n({target:"Object",stat:!0,forced:!u},{getOwnPropertyNames:fe,getOwnPropertySymbols:de}),n({target:"Object",stat:!0,forced:l((function(){E.f(1)}))},{getOwnPropertySymbols:function(e){return E.f(v(e))}}),$&&n({target:"JSON",stat:!0,forced:!u||l((function(){var e=W();return"[null]"!=$([e])||"{}"!=$({a:e})||"{}"!=$(Object(e))}))},{stringify:function(e,t,r){for(var n,o=[e],i=1;arguments.length>i;)o.push(arguments[i++]);if(n=t,(p(t)||void 0!==e)&&!ae(e))return d(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!ae(t))return t}),o[1]=t,$.apply(null,o)}}),W.prototype[G]||T(W.prototype,G,W.prototype.valueOf),C(W,q),D[F]=!0},4747:(e,t,r)=>{var n=r(7854),o=r(8324),i=r(8533),a=r(8880);for(var c in o){var u=n[c],s=u&&u.prototype;if(s&&s.forEach!==i)try{a(s,"forEach",i)}catch(e){s.forEach=i}}},4783:(e,t,r)=>{"use strict";var n=r(5618),o=Object.create(null),i="undefined"==typeof document,a=Array.prototype.forEach;function c(){}function u(e,t){if(!t){if(!e.href)return;t=e.href.split("?")[0]}if(l(t)&&!1!==e.isLoaded&&t&&t.indexOf(".css")>-1){e.visited=!0;var r=e.cloneNode();r.isLoaded=!1,r.addEventListener("load",(function(){r.isLoaded=!0,e.parentNode.removeChild(e)})),r.addEventListener("error",(function(){r.isLoaded=!0,e.parentNode.removeChild(e)})),r.href="".concat(t,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(r,e.nextSibling):e.parentNode.appendChild(r)}}function s(){var e=document.querySelectorAll("link");a.call(e,(function(e){!0!==e.visited&&u(e)}))}function l(e){return!!/^https?:/i.test(e)}e.exports=function(e,t){if(i)return console.log("no window.document found, will not HMR CSS"),c;var r,f,d=function(e){var t=o[e];if(!t){if(document.currentScript)t=document.currentScript.src;else{var r=document.getElementsByTagName("script"),i=r[r.length-1];i&&(t=i.src)}o[e]=t}return function(e){if(!t)return null;var r=t.split(/([^\\/]+)\.js$/),o=r&&r[1];return o&&e?e.split(",").map((function(e){var r=new RegExp("".concat(o,"\\.js$"),"g");return n(t.replace(r,"".concat(e.replace(/{fileName}/g,o),".css")))})):[t.replace(".js",".css")]}}(e);return r=function(){var e=d(t.filename),r=function(e){if(!e)return!1;var t=document.querySelectorAll("link"),r=!1;return a.call(t,(function(t){if(t.href){var o=function(e,t){var r;return e=n(e,{stripWWW:!1}),t.some((function(n){e.indexOf(t)>-1&&(r=n)})),r}(t.href,e);l(o)&&!0!==t.visited&&o&&(u(t,o),r=!0)}})),r}(e);if(t.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void s();r?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),s())},50,f=0,function(){var e=this,t=arguments,n=function(){return r.apply(e,t)};clearTimeout(f),f=setTimeout(n,50)}}},5618:e=>{"use strict";e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var t=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",r=e.replace(new RegExp(t,"i"),"").split("/"),n=r[0].toLowerCase().replace(/\.$/,"");return r[0]="",t+n+r.reduce((function(e,t){switch(t){case"..":e.pop();break;case".":break;default:e.push(t)}return e}),[]).join("/")}},8177:(e,t,r)=>{"use strict";var n=r(4783)(e.id,{locals:!1});e.hot.dispose(n),e.hot.accept(void 0,n)},5666:e=>{var t=function(e){"use strict";var t,r=Object.prototype,n=r.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function u(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,r){return e[t]=r}}function s(e,t,r,n){var o=t&&t.prototype instanceof m?t:m,i=Object.create(o.prototype),a=new j(n||[]);return i._invoke=function(e,t,r){var n=f;return function(o,i){if(n===p)throw new Error("Generator is already running");if(n===h){if("throw"===o)throw i;return _()}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var c=k(a,r);if(c){if(c===v)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===f)throw n=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=p;var u=l(e,t,r);if("normal"===u.type){if(n=r.done?h:d,u.arg===v)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(n=h,r.method="throw",r.arg=u.arg)}}}(e,r,a),i}function l(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f="suspendedStart",d="suspendedYield",p="executing",h="completed",v={};function m(){}function y(){}function g(){}var b={};b[i]=function(){return this};var w=Object.getPrototypeOf,x=w&&w(w(P([])));x&&x!==r&&n.call(x,i)&&(b=x);var S=g.prototype=m.prototype=Object.create(b);function E(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function O(e,t){function r(o,i,a,c){var u=l(e[o],e,i);if("throw"!==u.type){var s=u.arg,f=s.value;return f&&"object"==typeof f&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){r("next",e,a,c)}),(function(e){r("throw",e,a,c)})):t.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return r("throw",e,a,c)}))}c(u.arg)}var o;this._invoke=function(e,n){function i(){return new t((function(t,o){r(e,n,t,o)}))}return o=o?o.then(i,i):i()}}function k(e,r){var n=e.iterator[r.method];if(n===t){if(r.delegate=null,"throw"===r.method){if(e.iterator.return&&(r.method="return",r.arg=t,k(e,r),"throw"===r.method))return v;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=l(n,e.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,v;var i=o.arg;return i?i.done?(r[e.resultName]=i.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,v):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,v)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function T(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function j(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function P(e){if(e){var r=e[i];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,a=function r(){for(;++o<e.length;)if(n.call(e,o))return r.value=e[o],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}return{next:_}}function _(){return{value:t,done:!0}}return y.prototype=S.constructor=g,g.constructor=y,y.displayName=u(g,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,g):(e.__proto__=g,u(e,c,"GeneratorFunction")),e.prototype=Object.create(S),e},e.awrap=function(e){return{__await:e}},E(O.prototype),O.prototype[a]=function(){return this},e.AsyncIterator=O,e.async=function(t,r,n,o,i){void 0===i&&(i=Promise);var a=new O(s(t,r,n,o),i);return e.isGeneratorFunction(r)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},E(S),u(S,c,"Generator"),S[i]=function(){return this},S.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function r(){for(;t.length;){var n=t.pop();if(n in e)return r.value=n,r.done=!1,r}return r.done=!0,r}},e.values=P,j.prototype={constructor:j,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function o(n,o){return c.type="throw",c.arg=e,r.next=n,o&&(r.method="next",r.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],c=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var u=n.call(a,"catchLoc"),s=n.call(a,"finallyLoc");if(u&&s){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,v):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),T(r),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;T(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:P(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),v}},e}(e.exports);try{regeneratorRuntime=t}catch(e){Function("r","regeneratorRuntime = r")(t)}},7436:(e,t,r)=>{"use strict";e.exports=r.p+"./favicon.ico"}},u={};function s(e){if(u[e])return u[e].exports;var t=u[e]={id:e,exports:{}},r={id:e,module:t,factory:c[e],require:s};return s.i.forEach((function(e){e(r)})),t=r.module,r.factory.call(t.exports,t,t.exports,r.require),t.exports}s.m=c,s.c=u,s.i=[],s.hu=e=>e+"."+s.h()+".hot-update.js",s.miniCssF=e=>"main.css",s.hmrF=()=>"main."+s.h()+".hot-update.json",s.h=()=>"a6ed1a99cc65709f34a4",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="httpfront:",s.l=(r,n,o)=>{if(e[r])e[r].push(n);else{var i,a;if(void 0!==o)for(var c=document.getElementsByTagName("script"),u=0;u<c.length;u++){var l=c[u];if(l.getAttribute("src")==r||l.getAttribute("data-webpack")==t+o){i=l;break}}i||(a=!0,(i=document.createElement("script")).charset="utf-8",i.timeout=120,s.nc&&i.setAttribute("nonce",s.nc),i.setAttribute("data-webpack",t+o),i.src=r),e[r]=[n];var f=(t,n)=>{i.onerror=i.onload=null,clearTimeout(d);var o=e[r];if(delete e[r],i.parentNode&&i.parentNode.removeChild(i),o&&o.forEach((e=>e(n))),t)return t(n)},d=setTimeout(f.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=f.bind(null,i.onerror),i.onload=f.bind(null,i.onload),a&&document.head.appendChild(i)}},(()=>{var e,t,r,n,o={},i=s.c,a=[],c=[],u="idle";function l(e){u=e;for(var t=0;t<c.length;t++)c[t].call(null,e)}function f(e){if(0===t.length)return e();var r=t;return t=[],Promise.all(r).then((function(){return f(e)}))}function d(e){if("idle"!==u)throw new Error("check() is only allowed in idle status");return l("check"),s.hmrM().then((function(n){if(!n)return l(v()?"ready":"idle"),null;l("prepare");var o=[];return t=[],r=[],Promise.all(Object.keys(s.hmrC).reduce((function(e,t){return s.hmrC[t](n.c,n.r,n.m,e,r,o),e}),[])).then((function(){return f((function(){return e?h(e):(l("ready"),o)}))}))}))}function p(e){return"ready"!==u?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status")})):h(e)}function h(e){e=e||{},v();var t=r.map((function(t){return t(e)}));r=void 0;var o,i=t.map((function(e){return e.error})).filter(Boolean);if(i.length>0)return l("abort"),Promise.resolve().then((function(){throw i[0]}));l("dispose"),t.forEach((function(e){e.dispose&&e.dispose()})),l("apply");var a=function(e){o||(o=e)},c=[];return t.forEach((function(e){if(e.apply){var t=e.apply(a);if(t)for(var r=0;r<t.length;r++)c.push(t[r])}})),o?(l("fail"),Promise.resolve().then((function(){throw o}))):n?h(e).then((function(e){return c.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):(l("idle"),Promise.resolve(c))}function v(){if(n)return r||(r=[]),Object.keys(s.hmrI).forEach((function(e){n.forEach((function(t){s.hmrI[e](t,r)}))})),n=void 0,!0}s.hmrD=o,s.i.push((function(h){var v,m,y,g=h.module,b=function(r,n){var o=i[n];if(!o)return r;var c=function(t){if(o.hot.active){if(i[t]){var c=i[t].parents;-1===c.indexOf(n)&&c.push(n)}else a=[n],e=t;-1===o.children.indexOf(t)&&o.children.push(t)}else console.warn("[HMR] unexpected require("+t+") from disposed module "+n),a=[];return r(t)},s=function(e){return{configurable:!0,enumerable:!0,get:function(){return r[e]},set:function(t){r[e]=t}}};for(var d in r)Object.prototype.hasOwnProperty.call(r,d)&&"e"!==d&&Object.defineProperty(c,d,s(d));return c.e=function(e){return function(e){switch(u){case"ready":return l("prepare"),t.push(e),f((function(){l("ready")})),e;case"prepare":return t.push(e),e;default:return e}}(r.e(e))},c}(h.require,h.id);g.hot=(v=h.id,m=g,y={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:e!==v,_requireSelf:function(){a=m.parents.slice(),e=v,s(v)},active:!0,accept:function(e,t){if(void 0===e)y._selfAccepted=!0;else if("function"==typeof e)y._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)y._acceptedDependencies[e[r]]=t||function(){};else y._acceptedDependencies[e]=t||function(){}},decline:function(e){if(void 0===e)y._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)y._declinedDependencies[e[t]]=!0;else y._declinedDependencies[e]=!0},dispose:function(e){y._disposeHandlers.push(e)},addDisposeHandler:function(e){y._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=y._disposeHandlers.indexOf(e);t>=0&&y._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,u){case"idle":r=[],Object.keys(s.hmrI).forEach((function(e){s.hmrI[e](v,r)})),l("ready");break;case"ready":Object.keys(s.hmrI).forEach((function(e){s.hmrI[e](v,r)}));break;case"prepare":case"check":case"dispose":case"apply":(n=n||[]).push(v)}},check:d,apply:p,status:function(e){if(!e)return u;c.push(e)},addStatusHandler:function(e){c.push(e)},removeStatusHandler:function(e){var t=c.indexOf(e);t>=0&&c.splice(t,1)},data:o[v]},e=void 0,y),g.parents=a,g.children=[],a=[],h.require=b})),s.hmrC={},s.hmrI={}})(),(()=>{var e;s.g.importScripts&&(e=s.g.location+"");var t=s.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=e})(),r=(e,t,r,n)=>{var o=document.createElement("link");return o.rel="stylesheet",o.type="text/css",o.onerror=o.onload=i=>{if(o.onerror=o.onload=null,"load"===i.type)r();else{var a=i&&("load"===i.type?"missing":i.type),c=i&&i.target&&i.target.href||t,u=new Error("Loading CSS chunk "+e+" failed.\n("+c+")");u.code="CSS_CHUNK_LOAD_FAILED",u.type=a,u.request=c,o.parentNode.removeChild(o),n(u)}},o.href=t,document.head.appendChild(o),o},n=(e,t)=>{for(var r=document.getElementsByTagName("link"),n=0;n<r.length;n++){var o=(a=r[n]).getAttribute("data-href")||a.getAttribute("href");if("stylesheet"===a.rel&&(o===e||o===t))return a}var i=document.getElementsByTagName("style");for(n=0;n<i.length;n++){var a;if((o=(a=i[n]).getAttribute("data-href"))===e||o===t)return a}},o=[],i=[],a=e=>({dispose:()=>{for(var e=0;e<o.length;e++){var t=o[e];t.parentNode&&t.parentNode.removeChild(t)}o.length=0},apply:()=>{for(var e=0;e<i.length;e++)i[e].rel="stylesheet";i.length=0}}),s.hmrC.miniCss=(e,t,c,u,l,f)=>{l.push(a),e.forEach((e=>{var t=s.miniCssF(e),a=s.p+t;const c=n(t,a);c&&u.push(new Promise(((t,n)=>{var u=r(e,a,(()=>{u.as="style",u.rel="preload",t()}),n);o.push(c),i.push(u)})))}))},(()=>{var e,t,r,n,o={179:0},i={};function a(e){return new Promise(((t,r)=>{i[e]=t;var n=s.p+s.hu(e),o=new Error;s.l(n,(t=>{if(i[e]){i[e]=void 0;var n=t&&("load"===t.type?"missing":t.type),a=t&&t.target&&t.target.src;o.message="Loading hot update chunk "+e+" failed.\n("+n+": "+a+")",o.name="ChunkLoadError",o.type=n,o.request=a,r(o)}}))}))}function c(i){function a(e){for(var t=[e],r={},n=t.map((function(e){return{chain:[e],id:e}}));n.length>0;){var o=n.pop(),i=o.id,a=o.chain,u=s.c[i];if(u&&(!u.hot._selfAccepted||u.hot._selfInvalidated)){if(u.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:i};if(u.hot._main)return{type:"unaccepted",chain:a,moduleId:i};for(var l=0;l<u.parents.length;l++){var f=u.parents[l],d=s.c[f];if(d){if(d.hot._declinedDependencies[i])return{type:"declined",chain:a.concat([f]),moduleId:i,parentId:f};-1===t.indexOf(f)&&(d.hot._acceptedDependencies[i]?(r[f]||(r[f]=[]),c(r[f],[i])):(delete r[f],t.push(f),n.push({chain:a.concat([f]),id:f})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:r}}function c(e,t){for(var r=0;r<t.length;r++){var n=t[r];-1===e.indexOf(n)&&e.push(n)}}s.f&&delete s.f.jsonpHmr,e=void 0;var u={},l=[],f={},d=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in t)if(s.o(t,p)){var h,v=t[p],m=!1,y=!1,g=!1,b="";switch((h=v?a(p):{type:"disposed",moduleId:p}).chain&&(b="\nUpdate propagation: "+h.chain.join(" -> ")),h.type){case"self-declined":i.onDeclined&&i.onDeclined(h),i.ignoreDeclined||(m=new Error("Aborted because of self decline: "+h.moduleId+b));break;case"declined":i.onDeclined&&i.onDeclined(h),i.ignoreDeclined||(m=new Error("Aborted because of declined dependency: "+h.moduleId+" in "+h.parentId+b));break;case"unaccepted":i.onUnaccepted&&i.onUnaccepted(h),i.ignoreUnaccepted||(m=new Error("Aborted because "+p+" is not accepted"+b));break;case"accepted":i.onAccepted&&i.onAccepted(h),y=!0;break;case"disposed":i.onDisposed&&i.onDisposed(h),g=!0;break;default:throw new Error("Unexception type "+h.type)}if(m)return{error:m};if(y)for(p in f[p]=v,c(l,h.outdatedModules),h.outdatedDependencies)s.o(h.outdatedDependencies,p)&&(u[p]||(u[p]=[]),c(u[p],h.outdatedDependencies[p]));g&&(c(l,[h.moduleId]),f[p]=d)}t=void 0;for(var w,x=[],S=0;S<l.length;S++){var E=l[S];s.c[E]&&s.c[E].hot._selfAccepted&&f[E]!==d&&!s.c[E].hot._selfInvalidated&&x.push({module:E,require:s.c[E].hot._requireSelf,errorHandler:s.c[E].hot._selfAccepted})}return{dispose:function(){var e;r.forEach((function(e){delete o[e]})),r=void 0;for(var t,n=l.slice();n.length>0;){var i=n.pop(),a=s.c[i];if(a){var c={},f=a.hot._disposeHandlers;for(S=0;S<f.length;S++)f[S].call(null,c);for(s.hmrD[i]=c,a.hot.active=!1,delete s.c[i],delete u[i],S=0;S<a.children.length;S++){var d=s.c[a.children[S]];d&&(e=d.parents.indexOf(i))>=0&&d.parents.splice(e,1)}}}for(var p in u)if(s.o(u,p)&&(a=s.c[p]))for(w=u[p],S=0;S<w.length;S++)t=w[S],(e=a.children.indexOf(t))>=0&&a.children.splice(e,1)},apply:function(e){for(var t in f)s.o(f,t)&&(s.m[t]=f[t]);for(var r=0;r<n.length;r++)n[r](s);for(var o in u)if(s.o(u,o)){var a=s.c[o];if(a){w=u[o];for(var c=[],d=[],p=0;p<w.length;p++){var h=w[p],v=a.hot._acceptedDependencies[h];if(v){if(-1!==c.indexOf(v))continue;c.push(v),d.push(h)}}for(var m=0;m<c.length;m++)try{c[m].call(null,w)}catch(t){i.onErrored&&i.onErrored({type:"accept-errored",moduleId:o,dependencyId:d[m],error:t}),i.ignoreErrored||e(t)}}}for(var y=0;y<x.length;y++){var g=x[y],b=g.module;try{g.require(b)}catch(t){if("function"==typeof g.errorHandler)try{g.errorHandler(t)}catch(r){i.onErrored&&i.onErrored({type:"self-accept-error-handler-errored",moduleId:b,error:r,originalError:t}),i.ignoreErrored||e(r),e(t)}else i.onErrored&&i.onErrored({type:"self-accept-errored",moduleId:b,error:t}),i.ignoreErrored||e(t)}}return l}}}self.webpackHotUpdatehttpfront=(e,r,o)=>{for(var a in r)s.o(r,a)&&(t[a]=r[a]);o&&n.push(o),i[e]&&(i[e](),i[e]=void 0)},s.hmrI.jsonp=function(e,o){t||(t={},n=[],r=[],o.push(c)),s.o(t,e)||(t[e]=s.m[e])},s.hmrC.jsonp=function(i,u,l,f,d,p){d.push(c),e={},r=u,t=l.reduce((function(e,t){return e[t]=!1,e}),{}),n=[],i.forEach((function(t){s.o(o,t)&&void 0!==o[t]&&(f.push(a(t)),e[t]=!0)})),s.f&&(s.f.jsonpHmr=function(t,r){e&&!s.o(e,t)&&s.o(o,t)&&void 0!==o[t]&&(r.push(a(t)),e[t]=!0)})},s.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(s.p+s.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),s(1935)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9odHRwZnJvbnQvd2VicGFjay9ydW50aW1lL2xvYWQgc2NyaXB0Iiwid2VicGFjazovL2h0dHBmcm9udC93ZWJwYWNrL3J1bnRpbWUvY3NzIGxvYWRpbmciLCJ3ZWJwYWNrOi8vaHR0cGZyb250Ly4vc3JjL2pzL2FwcC5qcyIsIndlYnBhY2s6Ly9odHRwZnJvbnQvLi9zcmMvanMvTG9naWMuanMiLCJ3ZWJwYWNrOi8vaHR0cGZyb250Ly4vc3JjL2pzL0d1aS5qcyIsIndlYnBhY2s6Ly9odHRwZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly9odHRwZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYW4tb2JqZWN0LmpzIiwid2VicGFjazovL2h0dHBmcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly9odHRwZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vaHR0cGZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbi5qcyIsIndlYnBhY2s6Ly9odHRwZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vaHR0cGZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QuanMiLCJ3ZWJwYWNrOi8vaHR0cGZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LW1ldGhvZC11c2VzLXRvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly9odHRwZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vaHR0cGZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NsYXNzb2YtcmF3LmpzIiwid2VicGFjazovL2h0dHBmcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vaHR0cGZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9odHRwZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vaHR0cGZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9odHRwZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sLmpzIiwid2VicGFjazovL2h0dHBmcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly9odHRwZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vaHR0cGZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMuanMiLCJ3ZWJwYWNrOi8vaHR0cGZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50LmpzIiwid2VicGFjazovL2h0dHBmcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly9odHRwZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW51bS1idWcta2V5cy5qcyIsIndlYnBhY2s6Ly9odHRwZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZXhwb3J0LmpzIiwid2VicGFjazovL2h0dHBmcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mYWlscy5qcyIsIndlYnBhY2s6Ly9odHRwZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0LmpzIiwid2VicGFjazovL2h0dHBmcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtYnVpbHQtaW4uanMiLCJ3ZWJwYWNrOi8vaHR0cGZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly9odHRwZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGFzLmpzIiwid2VicGFjazovL2h0dHBmcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oaWRkZW4ta2V5cy5qcyIsIndlYnBhY2s6Ly9odHRwZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaHRtbC5qcyIsIndlYnBhY2s6Ly9odHRwZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vaHR0cGZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovL2h0dHBmcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZS5qcyIsIndlYnBhY2s6Ly9odHRwZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUuanMiLCJ3ZWJwYWNrOi8vaHR0cGZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LmpzIiwid2VicGFjazovL2h0dHBmcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1mb3JjZWQuanMiLCJ3ZWJwYWNrOi8vaHR0cGZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9odHRwZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtcHVyZS5qcyIsIndlYnBhY2s6Ly9odHRwZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly9odHRwZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwLmpzIiwid2VicGFjazovL2h0dHBmcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovL2h0dHBmcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vaHR0cGZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vaHR0cGZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vaHR0cGZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLWV4dGVybmFsLmpzIiwid2VicGFjazovL2h0dHBmcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIndlYnBhY2s6Ly9odHRwZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scy5qcyIsIndlYnBhY2s6Ly9odHRwZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vaHR0cGZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLmpzIiwid2VicGFjazovL2h0dHBmcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZS5qcyIsIndlYnBhY2s6Ly9odHRwZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vaHR0cGZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3BhdGguanMiLCJ3ZWJwYWNrOi8vaHR0cGZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZGVmaW5lLmpzIiwid2VicGFjazovL2h0dHBmcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUuanMiLCJ3ZWJwYWNrOi8vaHR0cGZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC1nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vaHR0cGZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL2h0dHBmcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQta2V5LmpzIiwid2VicGFjazovL2h0dHBmcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQtc3RvcmUuanMiLCJ3ZWJwYWNrOi8vaHR0cGZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC5qcyIsIndlYnBhY2s6Ly9odHRwZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vaHR0cGZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovL2h0dHBmcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1pbnRlZ2VyLmpzIiwid2VicGFjazovL2h0dHBmcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vaHR0cGZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9odHRwZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovL2h0dHBmcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91aWQuanMiLCJ3ZWJwYWNrOi8vaHR0cGZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkLmpzIiwid2VicGFjazovL2h0dHBmcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkLmpzIiwid2VicGFjazovL2h0dHBmcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly9odHRwZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyIsIndlYnBhY2s6Ly9odHRwZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZvci1lYWNoLmpzIiwid2VicGFjazovL2h0dHBmcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyIsIndlYnBhY2s6Ly9odHRwZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5kZXNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly9odHRwZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5qcyIsIndlYnBhY2s6Ly9odHRwZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vaHR0cGZyb250Ly4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvaG1yL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzIiwid2VicGFjazovL2h0dHBmcm9udC8uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2htci9ub3JtYWxpemUtdXJsLmpzIiwid2VicGFjazovL2h0dHBmcm9udC8uL3NyYy9jc3Mvc3R5bGUuY3NzPzZiN2IiLCJ3ZWJwYWNrOi8vaHR0cGZyb250Ly4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIndlYnBhY2s6Ly9odHRwZnJvbnQvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vaHR0cGZyb250L3dlYnBhY2svcnVudGltZS9nZXQgamF2YXNjcmlwdCB1cGRhdGUgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vaHR0cGZyb250L3dlYnBhY2svcnVudGltZS9nZXQgbWluaS1jc3MgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vaHR0cGZyb250L3dlYnBhY2svcnVudGltZS9nZXQgdXBkYXRlIG1hbmlmZXN0IGZpbGVuYW1lIiwid2VicGFjazovL2h0dHBmcm9udC93ZWJwYWNrL3J1bnRpbWUvZ2V0RnVsbEhhc2giLCJ3ZWJwYWNrOi8vaHR0cGZyb250L3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vaHR0cGZyb250L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vaHR0cGZyb250L3dlYnBhY2svcnVudGltZS9ob3QgbW9kdWxlIHJlcGxhY2VtZW50Iiwid2VicGFjazovL2h0dHBmcm9udC93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9odHRwZnJvbnQvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vaHR0cGZyb250L3dlYnBhY2svc3RhcnR1cCJdLCJuYW1lcyI6WyJpblByb2dyZXNzIiwiZGF0YVdlYnBhY2tQcmVmaXgiLCJjcmVhdGVTdHlsZXNoZWV0IiwiZmluZFN0eWxlc2hlZXQiLCJvbGRUYWdzIiwibmV3VGFncyIsImFwcGx5SGFuZGxlciIsImd1aSIsInRoaXMiLCJ0aWNrZXRzIiwidXJsIiwibW9kYWxTdWJtaXQiLCJiaW5kIiwibW9kYWxSZXNldCIsImdldFRpY2tldHMiLCJ3aWRnZXQiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInByZXZlbnREZWZhdWx0IiwidGFyZ2V0IiwiZGF0YXNldCIsImlkIiwiZWRpdFRpY2tldCIsImRlbFRpY2tldCIsInNob3dEZXNjcmlwdGlvbiIsImFkZFRpY2tldCIsIm1ldGhvZCIsInF1ZXJ5IiwidHlwZSIsInhociIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsInNlbmQiLCJyZXNwb25zZVRleHQiLCJuYW1lIiwiaWRmb3IiLCJyZXF1ZXN0IiwiRm9ybURhdGEiLCJkb2N1bWVudCIsImZvcm1zIiwiYXBwZW5kIiwic2VuZFhIUiIsIkpTT04iLCJyZXN1bHQiLCJwYXJzZSIsImxpc3QiLCJpbm5lckhUTUwiLCJyb3dUZW1wbGF0ZSIsInN0YXR1cyIsImNyZWF0ZWQiLCJtb2RhbCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjbGFzc0xpc3QiLCJhZGQiLCJjbG9zZXN0IiwicmVtb3ZlIiwiZGVsVGVtcGxhdGUiLCJlZGl0VGVtcGxhdGUiLCJjaGlsZHJlbiIsInBhcmVudEVsZW1lbnQiLCJkZXNjcmlwdGlvblRlbXBsYXRlIiwiZGVzY3JpcHRpb24iLCJyZW1vdmVDaGlsZCIsImZpbGxGaWVsZHMiLCJ0QXJyIiwiZm9yRWFjaCIsInRpY2tldCIsInF1ZXJ5U2VsZWN0b3IiLCJ0aXRsZSIsImRhdGEiLCJoZWFkZXIiLCJpbml0IiwibW9kdWxlIiwiZXhwb3J0cyIsIml0IiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiaXNPYmplY3QiLCIkZm9yRWFjaCIsImFycmF5TWV0aG9kSXNTdHJpY3QiLCJhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCIsIlNUUklDVF9NRVRIT0QiLCJVU0VTX1RPX0xFTkdUSCIsImNhbGxiYWNrZm4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJ0b0luZGV4ZWRPYmplY3QiLCJ0b0xlbmd0aCIsInRvQWJzb2x1dGVJbmRleCIsImNyZWF0ZU1ldGhvZCIsIklTX0lOQ0xVREVTIiwiJHRoaXMiLCJlbCIsImZyb21JbmRleCIsInZhbHVlIiwiTyIsImluZGV4IiwiaW5jbHVkZXMiLCJpbmRleE9mIiwiSW5kZXhlZE9iamVjdCIsInRvT2JqZWN0IiwiYXJyYXlTcGVjaWVzQ3JlYXRlIiwicHVzaCIsIlRZUEUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiSVNfRklMVEVSX09VVCIsIk5PX0hPTEVTIiwidGhhdCIsInNwZWNpZmljQ3JlYXRlIiwic2VsZiIsImJvdW5kRnVuY3Rpb24iLCJjcmVhdGUiLCJjYWxsIiwibWFwIiwiZmlsdGVyIiwic29tZSIsImV2ZXJ5IiwiZmluZCIsImZpbmRJbmRleCIsImZpbHRlck91dCIsImZhaWxzIiwid2VsbEtub3duU3ltYm9sIiwiVjhfVkVSU0lPTiIsIlNQRUNJRVMiLCJNRVRIT0RfTkFNRSIsImFycmF5IiwiY29uc3RydWN0b3IiLCJmb28iLCJCb29sZWFuIiwiYXJndW1lbnQiLCJERVNDUklQVE9SUyIsImhhcyIsImRlZmluZVByb3BlcnR5IiwiT2JqZWN0IiwiY2FjaGUiLCJ0aHJvd2VyIiwib3B0aW9ucyIsIkFDQ0VTU09SUyIsImFyZ3VtZW50MCIsImFyZ3VtZW50MSIsImVudW1lcmFibGUiLCJnZXQiLCJpc0FycmF5Iiwib3JpZ2luYWxBcnJheSIsIkMiLCJBcnJheSIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwic2xpY2UiLCJvd25LZXlzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlIiwiZGVmaW5lUHJvcGVydHlNb2R1bGUiLCJzb3VyY2UiLCJrZXlzIiwiZiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImkiLCJrZXkiLCJjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IiLCJvYmplY3QiLCJiaXRtYXAiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInRvUHJpbWl0aXZlIiwicHJvcGVydHlLZXkiLCJwYXRoIiwid3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSIsIk5BTUUiLCJTeW1ib2wiLCJnbG9iYWwiLCJFWElTVFMiLCJjcmVhdGVFbGVtZW50IiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJnZXRCdWlsdEluIiwibWF0Y2giLCJ2ZXJzaW9uIiwidXNlckFnZW50IiwicHJvY2VzcyIsInZlcnNpb25zIiwidjgiLCJzcGxpdCIsImNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSIsInJlZGVmaW5lIiwic2V0R2xvYmFsIiwiY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyIsImlzRm9yY2VkIiwidGFyZ2V0UHJvcGVydHkiLCJzb3VyY2VQcm9wZXJ0eSIsImRlc2NyaXB0b3IiLCJUQVJHRVQiLCJHTE9CQUwiLCJTVEFUSUMiLCJzdGF0Iiwibm9UYXJnZXRHZXQiLCJmb3JjZWQiLCJzaGFtIiwiZXhlYyIsImVycm9yIiwiYUZ1bmN0aW9uIiwiZm4iLCJhIiwiYiIsImMiLCJhcHBseSIsInZhcmlhYmxlIiwibmFtZXNwYWNlIiwiY2hlY2siLCJNYXRoIiwiZ2xvYmFsVGhpcyIsIndpbmRvdyIsImciLCJGdW5jdGlvbiIsImhhc093blByb3BlcnR5IiwiY2xhc3NvZiIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwic3RvcmUiLCJmdW5jdGlvblRvU3RyaW5nIiwiaW5zcGVjdFNvdXJjZSIsInNldCIsIk5BVElWRV9XRUFLX01BUCIsIm9iamVjdEhhcyIsInNoYXJlZCIsInNoYXJlZEtleSIsImhpZGRlbktleXMiLCJXZWFrTWFwIiwic3RhdGUiLCJ3bWdldCIsIndtaGFzIiwid21zZXQiLCJtZXRhZGF0YSIsImZhY2FkZSIsIlNUQVRFIiwiZW5mb3JjZSIsImdldHRlckZvciIsImFyZyIsInJlcGxhY2VtZW50IiwiZmVhdHVyZSIsImRldGVjdGlvbiIsIm5vcm1hbGl6ZSIsIlBPTFlGSUxMIiwiTkFUSVZFIiwic3RyaW5nIiwicmVwbGFjZSIsInRvTG93ZXJDYXNlIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwidGVzdCIsImFjdGl2ZVhEb2N1bWVudCIsImFuT2JqZWN0IiwiZGVmaW5lUHJvcGVydGllcyIsImVudW1CdWdLZXlzIiwiaHRtbCIsImRvY3VtZW50Q3JlYXRlRWxlbWVudCIsIklFX1BST1RPIiwiRW1wdHlDb25zdHJ1Y3RvciIsInNjcmlwdFRhZyIsImNvbnRlbnQiLCJMVCIsIk51bGxQcm90b09iamVjdCIsImRvbWFpbiIsIkFjdGl2ZVhPYmplY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsIndyaXRlIiwiY2xvc2UiLCJ0ZW1wIiwicGFyZW50V2luZG93IiwiTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCIsInN0eWxlIiwiZGlzcGxheSIsImFwcGVuZENoaWxkIiwic3JjIiwiY29udGVudFdpbmRvdyIsIkYiLCJQcm9wZXJ0aWVzIiwib2JqZWN0S2V5cyIsIklFOF9ET01fREVGSU5FIiwibmF0aXZlRGVmaW5lUHJvcGVydHkiLCJQIiwiQXR0cmlidXRlcyIsInByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlIiwibmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwibmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyIsIndpbmRvd05hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldFdpbmRvd05hbWVzIiwiaW50ZXJuYWxPYmplY3RLZXlzIiwiY29uY2F0IiwibmFtZXMiLCJuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSIsIk5BU0hPUk5fQlVHIiwiMSIsIlYiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlIiwiSW50ZXJuYWxTdGF0ZU1vZHVsZSIsImdldEludGVybmFsU3RhdGUiLCJlbmZvcmNlSW50ZXJuYWxTdGF0ZSIsIlRFTVBMQVRFIiwidW5zYWZlIiwic2ltcGxlIiwiam9pbiIsIlRPX1NUUklOR19UQUciLCJUQUciLCJ1aWQiLCJTSEFSRUQiLCJJU19QVVJFIiwibW9kZSIsImNvcHlyaWdodCIsInRvSW50ZWdlciIsIm1heCIsIm1pbiIsImludGVnZXIiLCJyZXF1aXJlT2JqZWN0Q29lcmNpYmxlIiwiY2VpbCIsImZsb29yIiwiaXNOYU4iLCJpbnB1dCIsIlBSRUZFUlJFRF9TVFJJTkciLCJ2YWwiLCJ2YWx1ZU9mIiwicG9zdGZpeCIsInJhbmRvbSIsIk5BVElWRV9TWU1CT0wiLCJpdGVyYXRvciIsIlVTRV9TWU1CT0xfQVNfVUlEIiwiV2VsbEtub3duU3ltYm9sc1N0b3JlIiwiY3JlYXRlV2VsbEtub3duU3ltYm9sIiwid2l0aG91dFNldHRlciIsIiQiLCJjcmVhdGVQcm9wZXJ0eSIsImFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQiLCJJU19DT05DQVRfU1BSRUFEQUJMRSIsIk1BWF9TQUZFX0lOVEVHRVIiLCJNQVhJTVVNX0FMTE9XRURfSU5ERVhfRVhDRUVERUQiLCJJU19DT05DQVRfU1BSRUFEQUJMRV9TVVBQT1JUIiwiU1BFQ0lFU19TVVBQT1JUIiwiaXNDb25jYXRTcHJlYWRhYmxlIiwic3ByZWFkYWJsZSIsInByb3RvIiwiayIsImxlbiIsIkUiLCJBIiwibiIsIkZ1bmN0aW9uUHJvdG90eXBlIiwiRnVuY3Rpb25Qcm90b3R5cGVUb1N0cmluZyIsIm5hbWVSRSIsIk5hdGl2ZVN5bWJvbCIsIkVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZSIsIlN5bWJvbFdyYXBwZXIiLCJzeW1ib2xQcm90b3R5cGUiLCJzeW1ib2xUb1N0cmluZyIsIm5hdGl2ZSIsInJlZ2V4cCIsInN5bWJvbCIsImRlc2MiLCJuYXRpdmVPYmplY3RDcmVhdGUiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwiLCJkZWZpbmVXZWxsS25vd25TeW1ib2wiLCJzZXRUb1N0cmluZ1RhZyIsIkhJRERFTiIsIlNZTUJPTCIsIlRPX1BSSU1JVElWRSIsInNldEludGVybmFsU3RhdGUiLCJPYmplY3RQcm90b3R5cGUiLCIkU3ltYm9sIiwiJHN0cmluZ2lmeSIsIkFsbFN5bWJvbHMiLCJPYmplY3RQcm90b3R5cGVTeW1ib2xzIiwiU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSIsIlN5bWJvbFRvU3RyaW5nUmVnaXN0cnkiLCJRT2JqZWN0IiwiVVNFX1NFVFRFUiIsImZpbmRDaGlsZCIsInNldFN5bWJvbERlc2NyaXB0b3IiLCJPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yIiwid3JhcCIsInRhZyIsImlzU3ltYm9sIiwiJGRlZmluZVByb3BlcnR5IiwiJGRlZmluZVByb3BlcnRpZXMiLCJwcm9wZXJ0aWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCIkZ2V0T3duUHJvcGVydHlOYW1lcyIsIklTX09CSkVDVF9QUk9UT1RZUEUiLCJzZXR0ZXIiLCJrZXlGb3IiLCJzeW0iLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCJzdHJpbmdpZnkiLCJyZXBsYWNlciIsInNwYWNlIiwiJHJlcGxhY2VyIiwiYXJncyIsIkRPTUl0ZXJhYmxlcyIsIkNPTExFQ1RJT05fTkFNRSIsIkNvbGxlY3Rpb24iLCJDb2xsZWN0aW9uUHJvdG90eXBlIiwibm9ybWFsaXplVXJsIiwic3JjQnlNb2R1bGVJZCIsIm5vRG9jdW1lbnQiLCJub29wIiwidXBkYXRlQ3NzIiwiaHJlZiIsImlzVXJsUmVxdWVzdCIsImlzTG9hZGVkIiwidmlzaXRlZCIsIm5ld0VsIiwiY2xvbmVOb2RlIiwicGFyZW50Tm9kZSIsIkRhdGUiLCJub3ciLCJuZXh0U2libGluZyIsImluc2VydEJlZm9yZSIsInJlbG9hZEFsbCIsImVsZW1lbnRzIiwicXVlcnlTZWxlY3RvckFsbCIsIm1vZHVsZUlkIiwiY29uc29sZSIsImxvZyIsInRpbWVvdXQiLCJnZXRTY3JpcHRTcmMiLCJjdXJyZW50U2NyaXB0Iiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwibGFzdFNjcmlwdFRhZyIsImZpbGVNYXAiLCJzcGxpdFJlc3VsdCIsImZpbGVuYW1lIiwibWFwUnVsZSIsInJlZyIsIlJlZ0V4cCIsImdldEN1cnJlbnRTY3JpcHRVcmwiLCJyZWxvYWRlZCIsImxvYWRlZCIsInJldCIsInN0cmlwV1dXIiwiZ2V0UmVsb2FkVXJsIiwicmVsb2FkU3R5bGUiLCJsb2NhbHMiLCJmdW5jdGlvbkNhbGwiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwidXJsU3RyaW5nIiwidHJpbSIsInByb3RvY29sIiwiY29tcG9uZW50cyIsImhvc3QiLCJyZWR1Y2UiLCJhY2N1bXVsYXRvciIsIml0ZW0iLCJwb3AiLCJjc3NSZWxvYWQiLCJob3QiLCJkaXNwb3NlIiwiYWNjZXB0IiwicnVudGltZSIsIk9wIiwiaGFzT3duIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwidG9TdHJpbmdUYWciLCJkZWZpbmUiLCJvYmoiLCJlcnIiLCJpbm5lckZuIiwib3V0ZXJGbiIsInRyeUxvY3NMaXN0IiwicHJvdG9HZW5lcmF0b3IiLCJHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJjb250ZXh0IiwiQ29udGV4dCIsIl9pbnZva2UiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwiR2VuU3RhdGVFeGVjdXRpbmciLCJFcnJvciIsIkdlblN0YXRlQ29tcGxldGVkIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwiQ29udGludWVTZW50aW5lbCIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwicmVjb3JkIiwidHJ5Q2F0Y2giLCJkb25lIiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIm1ha2VJbnZva2VNZXRob2QiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJnZXRQcm90byIsImdldFByb3RvdHlwZU9mIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJ2YWx1ZXMiLCJHcCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsIkFzeW5jSXRlcmF0b3IiLCJQcm9taXNlSW1wbCIsImludm9rZSIsInJlc29sdmUiLCJyZWplY3QiLCJfX2F3YWl0IiwidGhlbiIsInVud3JhcHBlZCIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiaW5mbyIsInJlc3VsdE5hbWUiLCJuZXh0IiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJlbnRyeSIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpdGVyYWJsZSIsIml0ZXJhdG9yTWV0aG9kIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsIm1hcmsiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImF3cmFwIiwiYXN5bmMiLCJQcm9taXNlIiwiaXRlciIsInJldmVyc2UiLCJza2lwVGVtcFJlc2V0IiwicHJldiIsImNoYXJBdCIsInN0b3AiLCJyb290UmVjb3JkIiwicnZhbCIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlZ2VuZXJhdG9yUnVudGltZSIsImFjY2lkZW50YWxTdHJpY3RNb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImV4ZWNPcHRpb25zIiwiZmFjdG9yeSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJyZXF1aXJlIiwiaGFuZGxlciIsIm0iLCJodSIsImNodW5rSWQiLCJoIiwibWluaUNzc0YiLCJobXJGIiwibyIsInByb3AiLCJsIiwic2NyaXB0IiwibmVlZEF0dGFjaCIsInMiLCJnZXRBdHRyaWJ1dGUiLCJjaGFyc2V0IiwibmMiLCJzZXRBdHRyaWJ1dGUiLCJvblNjcmlwdENvbXBsZXRlIiwiZXZlbnQiLCJvbmVycm9yIiwib25sb2FkIiwiZG9uZUZucyIsImhlYWQiLCJjdXJyZW50Q2hpbGRNb2R1bGUiLCJibG9ja2luZ1Byb21pc2VzIiwiY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMiLCJxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMiLCJjdXJyZW50TW9kdWxlRGF0YSIsImluc3RhbGxlZE1vZHVsZXMiLCJjdXJyZW50UGFyZW50cyIsInJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycyIsImN1cnJlbnRTdGF0dXMiLCJzZXRTdGF0dXMiLCJuZXdTdGF0dXMiLCJ3YWl0Rm9yQmxvY2tpbmdQcm9taXNlcyIsImJsb2NrZXIiLCJhbGwiLCJob3RDaGVjayIsImFwcGx5T25VcGRhdGUiLCJobXJNIiwidXBkYXRlIiwiYXBwbHlJbnZhbGlkYXRlZE1vZHVsZXMiLCJ1cGRhdGVkTW9kdWxlcyIsImhtckMiLCJwcm9taXNlcyIsInIiLCJpbnRlcm5hbEFwcGx5IiwiaG90QXBwbHkiLCJyZXN1bHRzIiwiZXJyb3JzIiwicmVwb3J0RXJyb3IiLCJvdXRkYXRlZE1vZHVsZXMiLCJtb2R1bGVzIiwiaG1ySSIsImhtckQiLCJtZSIsImFjdGl2ZSIsInBhcmVudHMiLCJ3YXJuIiwicHJvbWlzZSIsInRyYWNrQmxvY2tpbmdQcm9taXNlIiwiY3JlYXRlUmVxdWlyZSIsIl9hY2NlcHRlZERlcGVuZGVuY2llcyIsIl9kZWNsaW5lZERlcGVuZGVuY2llcyIsIl9zZWxmQWNjZXB0ZWQiLCJfc2VsZkRlY2xpbmVkIiwiX3NlbGZJbnZhbGlkYXRlZCIsIl9kaXNwb3NlSGFuZGxlcnMiLCJfbWFpbiIsIl9yZXF1aXJlU2VsZiIsImRlcCIsImNhbGxiYWNrIiwiZGVjbGluZSIsImFkZERpc3Bvc2VIYW5kbGVyIiwicmVtb3ZlRGlzcG9zZUhhbmRsZXIiLCJpZHgiLCJzcGxpY2UiLCJpbnZhbGlkYXRlIiwiYWRkU3RhdHVzSGFuZGxlciIsInJlbW92ZVN0YXR1c0hhbmRsZXIiLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwibG9jYXRpb24iLCJwIiwiZnVsbGhyZWYiLCJsaW5rVGFnIiwicmVsIiwiZXJyb3JUeXBlIiwicmVhbEhyZWYiLCJjb2RlIiwiZXhpc3RpbmdMaW5rVGFncyIsImRhdGFIcmVmIiwiZXhpc3RpbmdTdHlsZVRhZ3MiLCJvbGRUYWciLCJtaW5pQ3NzIiwiY2h1bmtJZHMiLCJyZW1vdmVkQ2h1bmtzIiwicmVtb3ZlZE1vZHVsZXMiLCJhcHBseUhhbmRsZXJzIiwidXBkYXRlZE1vZHVsZXNMaXN0IiwiYXMiLCJjdXJyZW50VXBkYXRlQ2h1bmtzIiwiY3VycmVudFVwZGF0ZSIsImN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzIiwiY3VycmVudFVwZGF0ZVJ1bnRpbWUiLCJpbnN0YWxsZWRDaHVua3MiLCIxNzkiLCJ3YWl0aW5nVXBkYXRlUmVzb2x2ZXMiLCJsb2FkVXBkYXRlQ2h1bmsiLCJyZWFsU3JjIiwibWVzc2FnZSIsImdldEFmZmVjdGVkTW9kdWxlRWZmZWN0cyIsInVwZGF0ZU1vZHVsZUlkIiwib3V0ZGF0ZWREZXBlbmRlbmNpZXMiLCJxdWV1ZSIsImNoYWluIiwicXVldWVJdGVtIiwicGFyZW50SWQiLCJwYXJlbnQiLCJhZGRBbGxUb1NldCIsImpzb25wSG1yIiwiYXBwbGllZFVwZGF0ZSIsIndhcm5VbmV4cGVjdGVkUmVxdWlyZSIsIm5ld01vZHVsZUZhY3RvcnkiLCJhYm9ydEVycm9yIiwiZG9BcHBseSIsImRvRGlzcG9zZSIsImNoYWluSW5mbyIsIm9uRGVjbGluZWQiLCJpZ25vcmVEZWNsaW5lZCIsIm9uVW5hY2NlcHRlZCIsImlnbm9yZVVuYWNjZXB0ZWQiLCJvbkFjY2VwdGVkIiwib25EaXNwb3NlZCIsIm1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzIiwib3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzIiwiaiIsIm91dGRhdGVkTW9kdWxlSWQiLCJlcnJvckhhbmRsZXIiLCJkZXBlbmRlbmN5IiwiZGlzcG9zZUhhbmRsZXJzIiwiY2hpbGQiLCJjYWxsYmFja3MiLCJkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3MiLCJhY2NlcHRDYWxsYmFjayIsIm9uRXJyb3JlZCIsImRlcGVuZGVuY3lJZCIsImlnbm9yZUVycm9yZWQiLCJlcnIyIiwib3JpZ2luYWxFcnJvciIsIm1vcmVNb2R1bGVzIiwianNvbnAiLCJmZXRjaCIsInJlc3BvbnNlIiwib2siLCJzdGF0dXNUZXh0IiwianNvbiJdLCJtYXBwaW5ncyI6IlVBQUlBLEVBQ0FDLEVDREFDLEVBMkJBQyxFQXdCQUMsRUFDQUMsRUFDQUMsRSx1dUJDakRVLEksV0NIWixXQUFZQyxJLDRGQUFLLFNBQ2ZDLEtBQUtELElBQU1BLEVBQ1hDLEtBQUtDLFFBQVUsS0FFZkQsS0FBS0UsSUFBTSxzQ0FDWEYsS0FBS0csWUFBY0gsS0FBS0csWUFBWUMsS0FBS0osTUFDekNBLEtBQUtLLFdBQWFMLEtBQUtLLFdBQVdELEtBQUtKLE0sOERBR2xDLFdBQ0xBLEtBQUtNLGFBQ0xOLEtBQUtELElBQUlRLE9BQU9DLGlCQUFpQixTQUFTLFNBQUNDLEdBQ3pDQSxFQUFFQyxpQkFDMEIsU0FBeEJELEVBQUVFLE9BQU9DLFFBQVFDLEdBQWUsRUFBS0MsV0FBV0wsR0FDbkIsUUFBeEJBLEVBQUVFLE9BQU9DLFFBQVFDLEdBQWMsRUFBS0UsVUFBVU4sR0FDdEIsVUFBeEJBLEVBQUVFLE9BQU9DLFFBQVFDLEdBQWdCLEVBQUtHLGdCQUFnQlAsR0FDOUIsUUFBeEJBLEVBQUVFLE9BQU9DLFFBQVFDLElBQWMsRUFBS0ksVUFBVVIsUSw4REFJN0NTLEVBQVFDLEVBQU9DLEcsbUdBQ3JCQyxFQUFNLElBQUlDLGVBQ0QsUUFBWEosR0FDSWhCLEVBRGMsVUFDTEYsS0FBS0UsSUFEQSxtQkFDY2lCLEdB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YixFQUFFc2pCLFNBQVcsU0FBVXJILEVBQVN5QyxHQUVsRHlELElBQ0MxRyxFQUFvQlksRUFBRThGLEVBQXFCbEcsSUFDNUNSLEVBQW9CWSxFQUFFa0csRUFBaUJ0RyxTQUNWMWdCLElBQTdCZ25CLEVBQWdCdEcsS0FFaEJ5QyxFQUFTbGlCLEtBQUtrbUIsRUFBZ0J6RyxJQUM5QmtHLEVBQW9CbEcsSUFBVyxNQU1uQ1IsRUFBb0I0QyxLQUFPLEtBQzFCLEdBQXFCLG9CQUFWaUgsTUFBdUIsTUFBTSxJQUFJalAsTUFBTSxzQ0FDbEQsT0FBT2lQLE1BQU03SixFQUFvQndGLEVBQUl4RixFQUFvQlcsUUFBUWhFLE1BQU1tTixJQUN0RSxHQUF1QixNQUFwQkEsRUFBU3RzQixPQUFaLENBQ0EsSUFBSXNzQixFQUFTQyxHQUFJLE1BQU0sSUFBSW5QLE1BQU0sbUNBQXFDa1AsRUFBU0UsWUFDL0UsT0FBT0YsRUFBU0csYSxHQ3JkbEJqSyxFQUFvQixPIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaW5Qcm9ncmVzcyA9IHt9O1xudmFyIGRhdGFXZWJwYWNrUHJlZml4ID0gXCJodHRwZnJvbnQ6XCI7XG4vLyBsb2FkU2NyaXB0IGZ1bmN0aW9uIHRvIGxvYWQgYSBzY3JpcHQgdmlhIHNjcmlwdCB0YWdcbl9fd2VicGFja19yZXF1aXJlX18ubCA9ICh1cmwsIGRvbmUsIGtleSkgPT4ge1xuXHRpZihpblByb2dyZXNzW3VybF0pIHsgaW5Qcm9ncmVzc1t1cmxdLnB1c2goZG9uZSk7IHJldHVybjsgfVxuXHR2YXIgc2NyaXB0LCBuZWVkQXR0YWNoO1xuXHRpZihrZXkgIT09IHVuZGVmaW5lZCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHNjcmlwdHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBzID0gc2NyaXB0c1tpXTtcblx0XHRcdGlmKHMuZ2V0QXR0cmlidXRlKFwic3JjXCIpID09IHVybCB8fCBzLmdldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiKSA9PSBkYXRhV2VicGFja1ByZWZpeCArIGtleSkgeyBzY3JpcHQgPSBzOyBicmVhazsgfVxuXHRcdH1cblx0fVxuXHRpZighc2NyaXB0KSB7XG5cdFx0bmVlZEF0dGFjaCA9IHRydWU7XG5cdFx0c2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cblx0XHRzY3JpcHQuY2hhcnNldCA9ICd1dGYtOCc7XG5cdFx0c2NyaXB0LnRpbWVvdXQgPSAxMjA7XG5cdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubmMpIHtcblx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKTtcblx0XHR9XG5cdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiLCBkYXRhV2VicGFja1ByZWZpeCArIGtleSk7XG5cdFx0c2NyaXB0LnNyYyA9IHVybDtcblx0fVxuXHRpblByb2dyZXNzW3VybF0gPSBbZG9uZV07XG5cdHZhciBvblNjcmlwdENvbXBsZXRlID0gKHByZXYsIGV2ZW50KSA9PiB7XG5cdFx0Ly8gYXZvaWQgbWVtIGxlYWtzIGluIElFLlxuXHRcdHNjcmlwdC5vbmVycm9yID0gc2NyaXB0Lm9ubG9hZCA9IG51bGw7XG5cdFx0Y2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuXHRcdHZhciBkb25lRm5zID0gaW5Qcm9ncmVzc1t1cmxdO1xuXHRcdGRlbGV0ZSBpblByb2dyZXNzW3VybF07XG5cdFx0c2NyaXB0LnBhcmVudE5vZGUgJiYgc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcblx0XHRkb25lRm5zICYmIGRvbmVGbnMuZm9yRWFjaCgoZm4pID0+IGZuKGV2ZW50KSk7XG5cdFx0aWYocHJldikgcmV0dXJuIHByZXYoZXZlbnQpO1xuXHR9XG5cdDtcblx0dmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCB1bmRlZmluZWQsIHsgdHlwZTogJ3RpbWVvdXQnLCB0YXJnZXQ6IHNjcmlwdCB9KSwgMTIwMDAwKTtcblx0c2NyaXB0Lm9uZXJyb3IgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9uZXJyb3IpO1xuXHRzY3JpcHQub25sb2FkID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmxvYWQpO1xuXHRuZWVkQXR0YWNoICYmIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbn07IiwidmFyIGNyZWF0ZVN0eWxlc2hlZXQgPSAoY2h1bmtJZCwgZnVsbGhyZWYsIHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHR2YXIgbGlua1RhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdGxpbmtUYWcucmVsID0gXCJzdHlsZXNoZWV0XCI7XG5cdGxpbmtUYWcudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0dmFyIG9uTGlua0NvbXBsZXRlID0gKGV2ZW50KSA9PiB7XG5cdFx0Ly8gYXZvaWQgbWVtIGxlYWtzLlxuXHRcdGxpbmtUYWcub25lcnJvciA9IGxpbmtUYWcub25sb2FkID0gbnVsbDtcblx0XHRpZiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnKSB7XG5cdFx0XHRyZXNvbHZlKCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBlcnJvclR5cGUgPSBldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnID8gJ21pc3NpbmcnIDogZXZlbnQudHlwZSk7XG5cdFx0XHR2YXIgcmVhbEhyZWYgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LmhyZWYgfHwgZnVsbGhyZWY7XG5cdFx0XHR2YXIgZXJyID0gbmV3IEVycm9yKFwiTG9hZGluZyBDU1MgY2h1bmsgXCIgKyBjaHVua0lkICsgXCIgZmFpbGVkLlxcbihcIiArIHJlYWxIcmVmICsgXCIpXCIpO1xuXHRcdFx0ZXJyLmNvZGUgPSBcIkNTU19DSFVOS19MT0FEX0ZBSUxFRFwiO1xuXHRcdFx0ZXJyLnR5cGUgPSBlcnJvclR5cGU7XG5cdFx0XHRlcnIucmVxdWVzdCA9IHJlYWxIcmVmO1xuXHRcdFx0bGlua1RhZy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGxpbmtUYWcpXG5cdFx0XHRyZWplY3QoZXJyKTtcblx0XHR9XG5cdH1cblx0bGlua1RhZy5vbmVycm9yID0gbGlua1RhZy5vbmxvYWQgPSBvbkxpbmtDb21wbGV0ZTtcblx0bGlua1RhZy5ocmVmID0gZnVsbGhyZWY7XG5cblx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChsaW5rVGFnKTtcblx0cmV0dXJuIGxpbmtUYWc7XG59O1xudmFyIGZpbmRTdHlsZXNoZWV0ID0gKGhyZWYsIGZ1bGxocmVmKSA9PiB7XG5cdHZhciBleGlzdGluZ0xpbmtUYWdzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJsaW5rXCIpO1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgZXhpc3RpbmdMaW5rVGFncy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciB0YWcgPSBleGlzdGluZ0xpbmtUYWdzW2ldO1xuXHRcdHZhciBkYXRhSHJlZiA9IHRhZy5nZXRBdHRyaWJ1dGUoXCJkYXRhLWhyZWZcIikgfHwgdGFnLmdldEF0dHJpYnV0ZShcImhyZWZcIik7XG5cdFx0aWYodGFnLnJlbCA9PT0gXCJzdHlsZXNoZWV0XCIgJiYgKGRhdGFIcmVmID09PSBocmVmIHx8IGRhdGFIcmVmID09PSBmdWxsaHJlZikpIHJldHVybiB0YWc7XG5cdH1cblx0dmFyIGV4aXN0aW5nU3R5bGVUYWdzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzdHlsZVwiKTtcblx0Zm9yKHZhciBpID0gMDsgaSA8IGV4aXN0aW5nU3R5bGVUYWdzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIHRhZyA9IGV4aXN0aW5nU3R5bGVUYWdzW2ldO1xuXHRcdHZhciBkYXRhSHJlZiA9IHRhZy5nZXRBdHRyaWJ1dGUoXCJkYXRhLWhyZWZcIik7XG5cdFx0aWYoZGF0YUhyZWYgPT09IGhyZWYgfHwgZGF0YUhyZWYgPT09IGZ1bGxocmVmKSByZXR1cm4gdGFnO1xuXHR9XG59O1xudmFyIGxvYWRTdHlsZXNoZWV0ID0gKGNodW5rSWQpID0+IHtcblx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHR2YXIgaHJlZiA9IF9fd2VicGFja19yZXF1aXJlX18ubWluaUNzc0YoY2h1bmtJZCk7XG5cdFx0dmFyIGZ1bGxocmVmID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgaHJlZjtcblx0XHRpZihmaW5kU3R5bGVzaGVldChocmVmLCBmdWxsaHJlZikpIHJldHVybiByZXNvbHZlKCk7XG5cdFx0Y3JlYXRlU3R5bGVzaGVldChjaHVua0lkLCBmdWxsaHJlZiwgcmVzb2x2ZSwgcmVqZWN0KTtcblx0fSk7XG59XG4vLyBubyBjaHVuayBsb2FkaW5nXG5cbnZhciBvbGRUYWdzID0gW107XG52YXIgbmV3VGFncyA9IFtdO1xudmFyIGFwcGx5SGFuZGxlciA9IChvcHRpb25zKSA9PiB7XG5cdHJldHVybiB7IGRpc3Bvc2U6ICgpID0+IHtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgb2xkVGFncy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIG9sZFRhZyA9IG9sZFRhZ3NbaV07XG5cdFx0XHRpZihvbGRUYWcucGFyZW50Tm9kZSkgb2xkVGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQob2xkVGFnKTtcblx0XHR9XG5cdFx0b2xkVGFncy5sZW5ndGggPSAwO1xuXHR9LCBhcHBseTogKCkgPT4ge1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBuZXdUYWdzLmxlbmd0aDsgaSsrKSBuZXdUYWdzW2ldLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuXHRcdG5ld1RhZ3MubGVuZ3RoID0gMDtcblx0fSB9O1xufVxuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJDLm1pbmlDc3MgPSAoY2h1bmtJZHMsIHJlbW92ZWRDaHVua3MsIHJlbW92ZWRNb2R1bGVzLCBwcm9taXNlcywgYXBwbHlIYW5kbGVycywgdXBkYXRlZE1vZHVsZXNMaXN0KSA9PiB7XG5cdGFwcGx5SGFuZGxlcnMucHVzaChhcHBseUhhbmRsZXIpO1xuXHRjaHVua0lkcy5mb3JFYWNoKChjaHVua0lkKSA9PiB7XG5cdFx0dmFyIGhyZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm1pbmlDc3NGKGNodW5rSWQpO1xuXHRcdHZhciBmdWxsaHJlZiA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIGhyZWY7XG5cdFx0Y29uc3Qgb2xkVGFnID0gZmluZFN0eWxlc2hlZXQoaHJlZiwgZnVsbGhyZWYpO1xuXHRcdGlmKCFvbGRUYWcpIHJldHVybjtcblx0XHRwcm9taXNlcy5wdXNoKG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdHZhciB0YWcgPSBjcmVhdGVTdHlsZXNoZWV0KGNodW5rSWQsIGZ1bGxocmVmLCAoKSA9PiB7XG5cdFx0XHRcdHRhZy5hcyA9IFwic3R5bGVcIjtcblx0XHRcdFx0dGFnLnJlbCA9IFwicHJlbG9hZFwiO1xuXHRcdFx0XHRyZXNvbHZlKCk7XG5cdFx0XHR9LCByZWplY3QpO1xuXHRcdFx0b2xkVGFncy5wdXNoKG9sZFRhZyk7XG5cdFx0XHRuZXdUYWdzLnB1c2godGFnKTtcblx0XHR9KSk7XG5cdH0pO1xufSIsImltcG9ydCBMb2dpYyBmcm9tICcuL0xvZ2ljLmpzJztcbmltcG9ydCBHdWkgZnJvbSAnLi9HdWkuanMnO1xuXG5jb25zdCBndWkgPSBuZXcgR3VpKCk7XG5jb25zdCBsb2dpYyA9IG5ldyBMb2dpYyhndWkpO1xubG9naWMuaW5pdCgpO1xuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9naWMge1xuICBjb25zdHJ1Y3RvcihndWkpIHtcbiAgICB0aGlzLmd1aSA9IGd1aTtcbiAgICB0aGlzLnRpY2tldHMgPSBudWxsO1xuICAgIC8vIHRoaXMudXJsID0gJ2h0dHA6Ly9sb2NhbGhvc3Q6NzA3MC8nO1xuICAgIHRoaXMudXJsID0gJ2h0dHBzOi8vYWhqLWh0dHAtYmFjay5oZXJva3VhcHAuY29tJztcbiAgICB0aGlzLm1vZGFsU3VibWl0ID0gdGhpcy5tb2RhbFN1Ym1pdC5iaW5kKHRoaXMpO1xuICAgIHRoaXMubW9kYWxSZXNldCA9IHRoaXMubW9kYWxSZXNldC5iaW5kKHRoaXMpO1xuICB9XG5cbiAgaW5pdCgpIHtcbiAgICB0aGlzLmdldFRpY2tldHMoKTtcbiAgICB0aGlzLmd1aS53aWRnZXQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgaWYgKGUudGFyZ2V0LmRhdGFzZXQuaWQgPT09ICdlZGl0JykgdGhpcy5lZGl0VGlja2V0KGUpO1xuICAgICAgZWxzZSBpZiAoZS50YXJnZXQuZGF0YXNldC5pZCA9PT0gJ2RlbCcpIHRoaXMuZGVsVGlja2V0KGUpO1xuICAgICAgZWxzZSBpZiAoZS50YXJnZXQuZGF0YXNldC5pZCA9PT0gJ3RpdGxlJykgdGhpcy5zaG93RGVzY3JpcHRpb24oZSk7XG4gICAgICBlbHNlIGlmIChlLnRhcmdldC5kYXRhc2V0LmlkID09PSAnYWRkJykgdGhpcy5hZGRUaWNrZXQoZSk7XG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBzZW5kWEhSKG1ldGhvZCwgcXVlcnksIHR5cGUpIHtcbiAgICBjb25zdCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICBpZiAobWV0aG9kID09PSAnR0VUJykge1xuICAgICAgY29uc3QgdXJsID0gYCR7dGhpcy51cmx9P21ldGhvZD0ke3F1ZXJ5fWA7XG4gICAgICB4aHIub3BlbihtZXRob2QsIHVybCwgZmFsc2UpO1xuICAgICAgeGhyLnNlbmQoKTtcbiAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gJ1BPU1QnKSB7XG4gICAgICBjb25zdCB1cmwgPSBgJHt0aGlzLnVybH0/bWV0aG9kPSR7dHlwZX1gO1xuICAgICAgeGhyLm9wZW4obWV0aG9kLCB1cmwsIGZhbHNlKTtcbiAgICAgIHhoci5zZW5kKHF1ZXJ5KTtcbiAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gJ0RFTEVURScpIHtcbiAgICAgIGNvbnN0IHVybCA9IGAke3RoaXMudXJsfT9tZXRob2Q9ZGVsZXRlVGlja2V0JmlkPSR7cXVlcnl9YDtcbiAgICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsLCBmYWxzZSk7XG4gICAgICB4aHIuc2VuZCgpO1xuICAgIH1cbiAgICByZXR1cm4gKHhoci5yZXNwb25zZVRleHQpO1xuICB9XG5cbiAgYXN5bmMgbW9kYWxTdWJtaXQoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCB7IG5hbWUgfSA9IGUudGFyZ2V0O1xuICAgIGNvbnN0IGlkID0gZS50YXJnZXQuZGF0YXNldC5pZGZvcjtcblxuICAgIGlmIChuYW1lID09PSAnZWRpdCcpIHtcbiAgICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgRm9ybURhdGEoZG9jdW1lbnQuZm9ybXNbMV0pO1xuICAgICAgcmVxdWVzdC5hcHBlbmQoJ2lkJywgaWQpO1xuICAgICAgKGF3YWl0ICh0aGlzLnNlbmRYSFIoJ1BPU1QnLCByZXF1ZXN0LCAnZWRpdFRpY2tldCcpKSk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAnZGVsJykge1xuICAgICAgY29uc3QgcmVxdWVzdCA9IGlkO1xuICAgICAgKCh0aGlzLnNlbmRYSFIoJ0RFTEVURScsIHJlcXVlc3QpKSk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAnY3JlYXRlVGlja2V0Jykge1xuICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBGb3JtRGF0YShkb2N1bWVudC5mb3Jtc1sxXSk7XG4gICAgICBjb25zdCByZXN1bHQgPSBKU09OLnBhcnNlKGF3YWl0ICh0aGlzLnNlbmRYSFIoJ1BPU1QnLCByZXF1ZXN0LCAnY3JlYXRlVGlja2V0JykpKTtcbiAgICAgIHRoaXMuZ3VpLmxpc3QuaW5uZXJIVE1MICs9IHRoaXMuZ3VpLnJvd1RlbXBsYXRlKFxuICAgICAgICByZXN1bHQuaWQsIHJlc3VsdC5zdGF0dXMsIHJlc3VsdC5uYW1lLCByZXN1bHQuY3JlYXRlZCxcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMuZ2V0VGlja2V0cygpO1xuICAgIHRoaXMuZ3VpLm1vZGFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIHRoaXMubW9kYWxTdWJtaXQpO1xuICAgIGF3YWl0IHRoaXMuZ3VpLm1vZGFsLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuICB9XG5cbiAgbW9kYWxSZXNldChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMuZ3VpLm1vZGFsLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuICAgIHRoaXMuZ3VpLm1vZGFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2V0JywgdGhpcy5tb2RhbFJlc2V0KTtcbiAgfVxuXG4gIGRlbFRpY2tldChlKSB7XG4gICAgY29uc3QgeyBpZCB9ID0gZS50YXJnZXQuY2xvc2VzdCgnLnJvdycpLmRhdGFzZXQ7XG4gICAgdGhpcy5ndWkubW9kYWwuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgdGhpcy5ndWkubW9kYWwuaW5uZXJIVE1MID0gdGhpcy5ndWkuZGVsVGVtcGxhdGUoaWQpO1xuICAgIHRoaXMuZ3VpLm1vZGFsLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIHRoaXMubW9kYWxTdWJtaXQpO1xuICAgIHRoaXMuZ3VpLm1vZGFsLmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2V0JywgdGhpcy5tb2RhbFJlc2V0KTtcbiAgfVxuXG4gIGFkZFRpY2tldCgpIHtcbiAgICB0aGlzLmd1aS5tb2RhbC5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcbiAgICB0aGlzLmd1aS5tb2RhbC5pbm5lckhUTUwgPSB0aGlzLmd1aS5lZGl0VGVtcGxhdGUoJ9CU0L7QsdCw0LLQuNGC0Ywg0YLQuNC60LXRgicsICcnLCAnJywgJ2NyZWF0ZVRpY2tldCcpO1xuICAgIHRoaXMuZ3VpLm1vZGFsLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIHRoaXMubW9kYWxTdWJtaXQpO1xuICAgIHRoaXMuZ3VpLm1vZGFsLmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2V0JywgdGhpcy5tb2RhbFJlc2V0KTtcbiAgfVxuXG4gIGFzeW5jIHNob3dEZXNjcmlwdGlvbihlKSB7XG4gICAgaWYgKCFlLnRhcmdldC5jaGlsZHJlblswXSkge1xuICAgICAgY29uc3QgeyBpZCB9ID0gZS50YXJnZXQucGFyZW50RWxlbWVudC5kYXRhc2V0O1xuICAgICAgY29uc3QgcmVzdWx0ID0gSlNPTi5wYXJzZShhd2FpdCB0aGlzLnNlbmRYSFIoJ0dFVCcsIGB0aWNrZXRCeUlkJmlkPSR7aWR9YCkpO1xuICAgICAgZS50YXJnZXQuaW5uZXJIVE1MICs9IHRoaXMuZ3VpLmRlc2NyaXB0aW9uVGVtcGxhdGUocmVzdWx0LmRlc2NyaXB0aW9uKTtcbiAgICB9IGVsc2UgZS50YXJnZXQucmVtb3ZlQ2hpbGQoZS50YXJnZXQuY2hpbGRyZW5bMF0pO1xuICB9XG5cbiAgYXN5bmMgZWRpdFRpY2tldChlKSB7XG4gICAgdGhpcy5ndWkubW9kYWwuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgY29uc3QgeyBpZCB9ID0gZS50YXJnZXQuY2xvc2VzdCgnLnJvdycpLmRhdGFzZXQ7XG4gICAgY29uc3QgcmVzdWx0ID0gSlNPTi5wYXJzZShhd2FpdCB0aGlzLnNlbmRYSFIoJ0dFVCcsIGB0aWNrZXRCeUlkJmlkPSR7aWR9YCkpO1xuXG4gICAgdGhpcy5ndWkubW9kYWwuaW5uZXJIVE1MID0gdGhpcy5ndWkuZWRpdFRlbXBsYXRlKFxuICAgICAgJ9CY0LfQvNC10L3QuNGC0Ywg0YLQuNC60LXRgicsIHJlc3VsdC5uYW1lLCByZXN1bHQuZGVzY3JpcHRpb24sICdlZGl0JywgaWQsXG4gICAgKTtcbiAgICB0aGlzLmd1aS5tb2RhbC5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCB0aGlzLm1vZGFsU3VibWl0KTtcbiAgICB0aGlzLmd1aS5tb2RhbC5hZGRFdmVudExpc3RlbmVyKCdyZXNldCcsIHRoaXMubW9kYWxSZXNldCk7XG4gIH1cblxuICBhc3luYyBnZXRUaWNrZXRzKCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IEpTT04ucGFyc2UoYXdhaXQgKHRoaXMuc2VuZFhIUignR0VUJywgJ2FsbFRpY2tldHMnKSkpO1xuICAgIHRoaXMudGlja2V0cyA9IHJlc3VsdDtcbiAgICB0aGlzLmZpbGxGaWVsZHMoKHRoaXMudGlja2V0cykpO1xuICB9XG5cbiAgZmlsbEZpZWxkcyh0QXJyKSB7XG4gICAgdGhpcy5ndWkubGlzdC5pbm5lckhUTUwgPSAnJztcbiAgICB0QXJyLmZvckVhY2goKHRpY2tldCkgPT4ge1xuICAgICAgdGhpcy5ndWkubGlzdC5pbm5lckhUTUwgKz0gdGhpcy5ndWkucm93VGVtcGxhdGUoXG4gICAgICAgIHRpY2tldC5pZCwgdGlja2V0LnN0YXR1cywgdGlja2V0Lm5hbWUsIHRpY2tldC5jcmVhdGVkLFxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxufVxuIiwiLyogZXNsaW50LWRpc2FibGUgY2xhc3MtbWV0aG9kcy11c2UtdGhpcyAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR3VpIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5zdGF0dXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1pZD1zdGF0dXNdJyk7XG4gICAgdGhpcy50aXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWlkPXRpdGxlXScpO1xuICAgIHRoaXMuZGF0YSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWlkPWRhdGFdJyk7XG4gICAgdGhpcy5saXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxpc3QnKTtcbiAgICB0aGlzLm1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsJyk7XG4gICAgdGhpcy53aWRnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGlja2V0c3dpZGdldCcpO1xuICB9XG5cbiAgcm93VGVtcGxhdGUoaWQsIHN0YXR1cywgdGl0bGUsIGRhdGEpIHtcbiAgICByZXR1cm4gYFxuICAgIDxkaXYgY2xhc3M9XCJyb3dcIiBkYXRhLWlkPVwiJHtpZH1cIj5cbiAgICAgIDxkaXYgZGF0YS1pZD1cInN0YXR1c1wiPiR7c3RhdHVzfTwvZGl2PlxuICAgICAgPGRpdiBkYXRhLWlkPVwidGl0bGVcIiBjbGFzcz1cInRpdGxlXCI+JHt0aXRsZX08L2Rpdj5cbiAgICAgIDxkaXYgZGF0YS1pZD1cImRhdGFcIiBjbGFzcz1cImRhdGVcIj4ke2RhdGF9PC9kaXY+XG4gICAgICA8ZGl2PjxidXR0b24gZGF0YS1pZD1cImVkaXRcIj5lZGl0PC9idXR0b24+PC9kaXY+XG4gICAgICA8ZGl2PjxidXR0b24gZGF0YS1pZD1cImRlbFwiPmRlbDwvYnV0dG9uPjwvZGl2PlxuICAgIDwvZGl2PmA7XG4gIH1cblxuICBlZGl0VGVtcGxhdGUoaGVhZGVyLCB0aXRsZSwgZGVzY3JpcHRpb24sIG5hbWUsIGlkKSB7XG4gICAgcmV0dXJuIGBcbiAgICA8Zm9ybSBuYW1lPSR7bmFtZX0gZGF0YS1pZGZvcj1cIiR7aWR9XCI+XG4gICAgICA8aDM+JHtoZWFkZXJ9PC9oMz5cbiAgICAgINCa0YDQsNGC0LrQvtC1INC+0L/QuNGB0LDQvdC40LUgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cInRpdGxlXCIgdmFsdWU9XCIke3RpdGxlfVwiPjxicj5cbiAgICAgINCf0L7QtNGA0L7QsdC90L7QtSDQvtC/0LjRgdCw0L3QuNC1IDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJkZXNjcmlwdGlvblwiIHZhbHVlPVwiJHtkZXNjcmlwdGlvbn1cIj48YnI+XG4gICAgICA8YnV0dG9uIHR5cGU9XCJyZXNldFwiPtCe0YLQvNC10L3QsDwvYnV0dG9uPlxuICAgICAgPGJ1dHRvbiB0eXBlPVwic3VibWl0XCI+0J7QujwvYnV0dG9uPlxuICAgIDwvZm9ybT5cbiAgICAgIGA7XG4gIH1cblxuICBkZXNjcmlwdGlvblRlbXBsYXRlKGRlc2NyaXB0aW9uKSB7XG4gICAgcmV0dXJuIGBcbiAgICA8cD4ke2Rlc2NyaXB0aW9ufTwvcD5cbiAgICBgO1xuICB9XG5cbiAgZGVsVGVtcGxhdGUoaWQpIHtcbiAgICByZXR1cm4gYFxuICAgIDxmb3JtIG5hbWU9XCJkZWxcIiBkYXRhLWlkZm9yPSR7aWR9PlxuICAgICAgPGgzPtCj0LTQsNC70LjRgtGMINGC0LjQutC10YI8L2gzPlxuICAgICAgPHA+QXJlIHlvdSBzdXJlPyBJdCdzIGNhbid0IGJlIGNhbmNlbGxlZC48L3A+XG4gICAgICA8YnV0dG9uIHR5cGU9XCJyZXNldFwiPtCe0YLQvNC10L3QsDwvYnV0dG9uPlxuICAgICAgPGJ1dHRvbiB0eXBlPVwic3VibWl0XCI+0J7QujwvYnV0dG9uPlxuICAgIDwvZm9ybT5cbiAgICBgO1xuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkge1xuICAgIHRocm93IFR5cGVFcnJvcihTdHJpbmcoaXQpICsgJyBpcyBub3QgYW4gb2JqZWN0Jyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xudmFyIGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC11c2VzLXRvLWxlbmd0aCcpO1xuXG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ2ZvckVhY2gnKTtcbnZhciBVU0VTX1RPX0xFTkdUSCA9IGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoKCdmb3JFYWNoJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG5tb2R1bGUuZXhwb3J0cyA9ICghU1RSSUNUX01FVEhPRCB8fCAhVVNFU19UT19MRU5HVEgpID8gZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICByZXR1cm4gJGZvckVhY2godGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSA6IFtdLmZvckVhY2g7XG4iLCJ2YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUueyBpbmRleE9mLCBpbmNsdWRlcyB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgIGlmICgoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykgJiYgT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4gIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiAgaW5kZXhPZjogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsInZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxudmFyIHB1c2ggPSBbXS5wdXNoO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgZm9yRWFjaCwgbWFwLCBmaWx0ZXIsIHNvbWUsIGV2ZXJ5LCBmaW5kLCBmaW5kSW5kZXgsIGZpbHRlck91dCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBJU19GSUxURVJfT1VUID0gVFlQRSA9PSA3O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCwgc3BlY2lmaWNDcmVhdGUpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IEluZGV4ZWRPYmplY3QoTyk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIHRoYXQsIDMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgY3JlYXRlID0gc3BlY2lmaWNDcmVhdGUgfHwgYXJyYXlTcGVjaWVzQ3JlYXRlO1xuICAgIHZhciB0YXJnZXQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgfHwgSVNfRklMVEVSX09VVCA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbHVlLCByZXN1bHQ7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7XG4gICAgICB2YWx1ZSA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzdWx0ID0gYm91bmRGdW5jdGlvbih2YWx1ZSwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgdGFyZ2V0W2luZGV4XSA9IHJlc3VsdDsgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlc3VsdCkgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWx1ZTsgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHB1c2guY2FsbCh0YXJnZXQsIHZhbHVlKTsgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDQ6IHJldHVybiBmYWxzZTsgICAgICAgICAgICAgLy8gZXZlcnlcbiAgICAgICAgICBjYXNlIDc6IHB1c2guY2FsbCh0YXJnZXQsIHZhbHVlKTsgLy8gZmlsdGVyT3V0XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHRhcmdldDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG4gIGZvckVhY2g6IGNyZWF0ZU1ldGhvZCgwKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5tYXBcbiAgbWFwOiBjcmVhdGVNZXRob2QoMSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsdGVyXG4gIGZpbHRlcjogY3JlYXRlTWV0aG9kKDIpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLnNvbWVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb21lXG4gIHNvbWU6IGNyZWF0ZU1ldGhvZCgzKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5ldmVyeWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmV2ZXJ5XG4gIGV2ZXJ5OiBjcmVhdGVNZXRob2QoNCksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRcbiAgZmluZDogY3JlYXRlTWV0aG9kKDUpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRJbmRleFxuICBmaW5kSW5kZXg6IGNyZWF0ZU1ldGhvZCg2KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJPdXRgIG1ldGhvZFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1hcnJheS1maWx0ZXJpbmdcbiAgZmlsdGVyT3V0OiBjcmVhdGVNZXRob2QoNylcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB0aGlzIGZlYXR1cmUgZGV0ZWN0aW9uIGluIFY4IHNpbmNlIGl0IGNhdXNlc1xuICAvLyBkZW9wdGltaXphdGlvbiBhbmQgc2VyaW91cyBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc3XG4gIHJldHVybiBWOF9WRVJTSU9OID49IDUxIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFycmF5ID0gW107XG4gICAgdmFyIGNvbnN0cnVjdG9yID0gYXJyYXkuY29uc3RydWN0b3IgPSB7fTtcbiAgICBjb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7IGZvbzogMSB9O1xuICAgIH07XG4gICAgcmV0dXJuIGFycmF5W01FVEhPRF9OQU1FXShCb29sZWFuKS5mb28gIT09IDE7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSwgYXJndW1lbnQpIHtcbiAgdmFyIG1ldGhvZCA9IFtdW01FVEhPRF9OQU1FXTtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsLG5vLXRocm93LWxpdGVyYWxcbiAgICBtZXRob2QuY2FsbChudWxsLCBhcmd1bWVudCB8fCBmdW5jdGlvbiAoKSB7IHRocm93IDE7IH0sIDEpO1xuICB9KTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGNhY2hlID0ge307XG5cbnZhciB0aHJvd2VyID0gZnVuY3Rpb24gKGl0KSB7IHRocm93IGl0OyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSwgb3B0aW9ucykge1xuICBpZiAoaGFzKGNhY2hlLCBNRVRIT0RfTkFNRSkpIHJldHVybiBjYWNoZVtNRVRIT0RfTkFNRV07XG4gIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9O1xuICB2YXIgbWV0aG9kID0gW11bTUVUSE9EX05BTUVdO1xuICB2YXIgQUNDRVNTT1JTID0gaGFzKG9wdGlvbnMsICdBQ0NFU1NPUlMnKSA/IG9wdGlvbnMuQUNDRVNTT1JTIDogZmFsc2U7XG4gIHZhciBhcmd1bWVudDAgPSBoYXMob3B0aW9ucywgMCkgPyBvcHRpb25zWzBdIDogdGhyb3dlcjtcbiAgdmFyIGFyZ3VtZW50MSA9IGhhcyhvcHRpb25zLCAxKSA/IG9wdGlvbnNbMV0gOiB1bmRlZmluZWQ7XG5cbiAgcmV0dXJuIGNhY2hlW01FVEhPRF9OQU1FXSA9ICEhbWV0aG9kICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgaWYgKEFDQ0VTU09SUyAmJiAhREVTQ1JJUFRPUlMpIHJldHVybiB0cnVlO1xuICAgIHZhciBPID0geyBsZW5ndGg6IC0xIH07XG5cbiAgICBpZiAoQUNDRVNTT1JTKSBkZWZpbmVQcm9wZXJ0eShPLCAxLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogdGhyb3dlciB9KTtcbiAgICBlbHNlIE9bMV0gPSAxO1xuXG4gICAgbWV0aG9kLmNhbGwoTywgYXJndW1lbnQwLCBhcmd1bWVudDEpO1xuICB9KTtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG4vLyBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbEFycmF5LCBsZW5ndGgpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsQXJyYXkpKSB7XG4gICAgQyA9IG9yaWdpbmFsQXJyYXkuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGVsc2UgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gbmV3IChDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEMpKGxlbmd0aCA9PT0gMCA/IDAgOiBsZW5ndGgpO1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vd24ta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuICB2YXIga2V5cyA9IG93bktleXMoc291cmNlKTtcbiAgdmFyIGRlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbiAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAoIWhhcyh0YXJnZXQsIGtleSkpIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgfVxufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5TW9kdWxlLmYob2JqZWN0LCBrZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHZhciBwcm9wZXJ0eUtleSA9IHRvUHJpbWl0aXZlKGtleSk7XG4gIGlmIChwcm9wZXJ0eUtleSBpbiBvYmplY3QpIGRlZmluZVByb3BlcnR5TW9kdWxlLmYob2JqZWN0LCBwcm9wZXJ0eUtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIHZhbHVlKSk7XG4gIGVsc2Ugb2JqZWN0W3Byb3BlcnR5S2V5XSA9IHZhbHVlO1xufTtcbiIsInZhciBwYXRoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BhdGgnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUpIHtcbiAgdmFyIFN5bWJvbCA9IHBhdGguU3ltYm9sIHx8IChwYXRoLlN5bWJvbCA9IHt9KTtcbiAgaWYgKCFoYXMoU3ltYm9sLCBOQU1FKSkgZGVmaW5lUHJvcGVydHkoU3ltYm9sLCBOQU1FLCB7XG4gICAgdmFsdWU6IHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUuZihOQU1FKVxuICB9KTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gRGV0ZWN0IElFOCdzIGluY29tcGxldGUgZGVmaW5lUHJvcGVydHkgaW1wbGVtZW50YXRpb25cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgMSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSlbMV0gIT0gNztcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgRVhJU1RTID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gRVhJU1RTID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCIvLyBpdGVyYWJsZSBET00gY29sbGVjdGlvbnNcbi8vIGZsYWcgLSBgaXRlcmFibGVgIGludGVyZmFjZSAtICdlbnRyaWVzJywgJ2tleXMnLCAndmFsdWVzJywgJ2ZvckVhY2gnIG1ldGhvZHNcbm1vZHVsZS5leHBvcnRzID0ge1xuICBDU1NSdWxlTGlzdDogMCxcbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogMCxcbiAgQ1NTVmFsdWVMaXN0OiAwLFxuICBDbGllbnRSZWN0TGlzdDogMCxcbiAgRE9NUmVjdExpc3Q6IDAsXG4gIERPTVN0cmluZ0xpc3Q6IDAsXG4gIERPTVRva2VuTGlzdDogMSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IDAsXG4gIEZpbGVMaXN0OiAwLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogMCxcbiAgSFRNTENvbGxlY3Rpb246IDAsXG4gIEhUTUxGb3JtRWxlbWVudDogMCxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IDAsXG4gIE1lZGlhTGlzdDogMCxcbiAgTWltZVR5cGVBcnJheTogMCxcbiAgTmFtZWROb2RlTWFwOiAwLFxuICBOb2RlTGlzdDogMSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogMCxcbiAgUGx1Z2luOiAwLFxuICBQbHVnaW5BcnJheTogMCxcbiAgU1ZHTGVuZ3RoTGlzdDogMCxcbiAgU1ZHTnVtYmVyTGlzdDogMCxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IDAsXG4gIFNWR1BvaW50TGlzdDogMCxcbiAgU1ZHU3RyaW5nTGlzdDogMCxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogMCxcbiAgU291cmNlQnVmZmVyTGlzdDogMCxcbiAgU3R5bGVTaGVldExpc3Q6IDAsXG4gIFRleHRUcmFja0N1ZUxpc3Q6IDAsXG4gIFRleHRUcmFja0xpc3Q6IDAsXG4gIFRvdWNoTGlzdDogMFxufTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ25hdmlnYXRvcicsICd1c2VyQWdlbnQnKSB8fCAnJztcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnM7XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52ODtcbnZhciBtYXRjaCwgdmVyc2lvbjtcblxuaWYgKHY4KSB7XG4gIG1hdGNoID0gdjguc3BsaXQoJy4nKTtcbiAgdmVyc2lvbiA9IG1hdGNoWzBdICsgbWF0Y2hbMV07XG59IGVsc2UgaWYgKHVzZXJBZ2VudCkge1xuICBtYXRjaCA9IHVzZXJBZ2VudC5tYXRjaCgvRWRnZVxcLyhcXGQrKS8pO1xuICBpZiAoIW1hdGNoIHx8IG1hdGNoWzFdID49IDc0KSB7XG4gICAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0Nocm9tZVxcLyhcXGQrKS8pO1xuICAgIGlmIChtYXRjaCkgdmVyc2lvbiA9IG1hdGNoWzFdO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdmVyc2lvbiAmJiArdmVyc2lvbjtcbiIsIi8vIElFOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSBbXG4gICdjb25zdHJ1Y3RvcicsXG4gICdoYXNPd25Qcm9wZXJ0eScsXG4gICdpc1Byb3RvdHlwZU9mJyxcbiAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcbiAgJ3RvTG9jYWxlU3RyaW5nJyxcbiAgJ3RvU3RyaW5nJyxcbiAgJ3ZhbHVlT2YnXG5dO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xuXG4vKlxuICBvcHRpb25zLnRhcmdldCAgICAgIC0gbmFtZSBvZiB0aGUgdGFyZ2V0IG9iamVjdFxuICBvcHRpb25zLmdsb2JhbCAgICAgIC0gdGFyZ2V0IGlzIHRoZSBnbG9iYWwgb2JqZWN0XG4gIG9wdGlvbnMuc3RhdCAgICAgICAgLSBleHBvcnQgYXMgc3RhdGljIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucHJvdG8gICAgICAgLSBleHBvcnQgYXMgcHJvdG90eXBlIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucmVhbCAgICAgICAgLSByZWFsIHByb3RvdHlwZSBtZXRob2QgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLmZvcmNlZCAgICAgIC0gZXhwb3J0IGV2ZW4gaWYgdGhlIG5hdGl2ZSBmZWF0dXJlIGlzIGF2YWlsYWJsZVxuICBvcHRpb25zLmJpbmQgICAgICAgIC0gYmluZCBtZXRob2RzIHRvIHRoZSB0YXJnZXQsIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy53cmFwICAgICAgICAtIHdyYXAgY29uc3RydWN0b3JzIHRvIHByZXZlbnRpbmcgZ2xvYmFsIHBvbGx1dGlvbiwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLnVuc2FmZSAgICAgIC0gdXNlIHRoZSBzaW1wbGUgYXNzaWdubWVudCBvZiBwcm9wZXJ0eSBpbnN0ZWFkIG9mIGRlbGV0ZSArIGRlZmluZVByb3BlcnR5XG4gIG9wdGlvbnMuc2hhbSAgICAgICAgLSBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gIG9wdGlvbnMuZW51bWVyYWJsZSAgLSBleHBvcnQgYXMgZW51bWVyYWJsZSBwcm9wZXJ0eVxuICBvcHRpb25zLm5vVGFyZ2V0R2V0IC0gcHJldmVudCBjYWxsaW5nIGEgZ2V0dGVyIG9uIHRhcmdldFxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdGlvbnMsIHNvdXJjZSkge1xuICB2YXIgVEFSR0VUID0gb3B0aW9ucy50YXJnZXQ7XG4gIHZhciBHTE9CQUwgPSBvcHRpb25zLmdsb2JhbDtcbiAgdmFyIFNUQVRJQyA9IG9wdGlvbnMuc3RhdDtcbiAgdmFyIEZPUkNFRCwgdGFyZ2V0LCBrZXksIHRhcmdldFByb3BlcnR5LCBzb3VyY2VQcm9wZXJ0eSwgZGVzY3JpcHRvcjtcbiAgaWYgKEdMT0JBTCkge1xuICAgIHRhcmdldCA9IGdsb2JhbDtcbiAgfSBlbHNlIGlmIChTVEFUSUMpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWxbVEFSR0VUXSB8fCBzZXRHbG9iYWwoVEFSR0VULCB7fSk7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0ID0gKGdsb2JhbFtUQVJHRVRdIHx8IHt9KS5wcm90b3R5cGU7XG4gIH1cbiAgaWYgKHRhcmdldCkgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgc291cmNlUHJvcGVydHkgPSBzb3VyY2Vba2V5XTtcbiAgICBpZiAob3B0aW9ucy5ub1RhcmdldEdldCkge1xuICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG4gICAgICB0YXJnZXRQcm9wZXJ0eSA9IGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci52YWx1ZTtcbiAgICB9IGVsc2UgdGFyZ2V0UHJvcGVydHkgPSB0YXJnZXRba2V5XTtcbiAgICBGT1JDRUQgPSBpc0ZvcmNlZChHTE9CQUwgPyBrZXkgOiBUQVJHRVQgKyAoU1RBVElDID8gJy4nIDogJyMnKSArIGtleSwgb3B0aW9ucy5mb3JjZWQpO1xuICAgIC8vIGNvbnRhaW5lZCBpbiB0YXJnZXRcbiAgICBpZiAoIUZPUkNFRCAmJiB0YXJnZXRQcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodHlwZW9mIHNvdXJjZVByb3BlcnR5ID09PSB0eXBlb2YgdGFyZ2V0UHJvcGVydHkpIGNvbnRpbnVlO1xuICAgICAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhzb3VyY2VQcm9wZXJ0eSwgdGFyZ2V0UHJvcGVydHkpO1xuICAgIH1cbiAgICAvLyBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gICAgaWYgKG9wdGlvbnMuc2hhbSB8fCAodGFyZ2V0UHJvcGVydHkgJiYgdGFyZ2V0UHJvcGVydHkuc2hhbSkpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShzb3VyY2VQcm9wZXJ0eSwgJ3NoYW0nLCB0cnVlKTtcbiAgICB9XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzb3VyY2VQcm9wZXJ0eSwgb3B0aW9ucyk7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwidmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG5cbi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCk7XG4gICAgfTtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJ2YXIgcGF0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wYXRoJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG52YXIgYUZ1bmN0aW9uID0gZnVuY3Rpb24gKHZhcmlhYmxlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFyaWFibGUgPT0gJ2Z1bmN0aW9uJyA/IHZhcmlhYmxlIDogdW5kZWZpbmVkO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZXNwYWNlLCBtZXRob2QpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gYUZ1bmN0aW9uKHBhdGhbbmFtZXNwYWNlXSkgfHwgYUZ1bmN0aW9uKGdsb2JhbFtuYW1lc3BhY2VdKVxuICAgIDogcGF0aFtuYW1lc3BhY2VdICYmIHBhdGhbbmFtZXNwYWNlXVttZXRob2RdIHx8IGdsb2JhbFtuYW1lc3BhY2VdICYmIGdsb2JhbFtuYW1lc3BhY2VdW21ldGhvZF07XG59O1xuIiwidmFyIGNoZWNrID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAmJiBpdC5NYXRoID09IE1hdGggJiYgaXQ7XG59O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxubW9kdWxlLmV4cG9ydHMgPVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgY2hlY2sodHlwZW9mIGdsb2JhbFRoaXMgPT0gJ29iamVjdCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgY2hlY2sodHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cpIHx8XG4gIGNoZWNrKHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYpIHx8XG4gIGNoZWNrKHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsKSB8fFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pKCkgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdkb2N1bWVudCcsICdkb2N1bWVudEVsZW1lbnQnKTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xuXG4vLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFERVNDUklQVE9SUyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGNyZWF0ZUVsZW1lbnQoJ2RpdicpLCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH1cbiAgfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG5cbnZhciBzcGxpdCA9ICcnLnNwbGl0O1xuXG4vLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xubW9kdWxlLmV4cG9ydHMgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIHRocm93cyBhbiBlcnJvciBpbiByaGlubywgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3JoaW5vL2lzc3Vlcy8zNDZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICByZXR1cm4gIU9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApO1xufSkgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNsYXNzb2YoaXQpID09ICdTdHJpbmcnID8gc3BsaXQuY2FsbChpdCwgJycpIDogT2JqZWN0KGl0KTtcbn0gOiBPYmplY3Q7XG4iLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlJyk7XG5cbnZhciBmdW5jdGlvblRvU3RyaW5nID0gRnVuY3Rpb24udG9TdHJpbmc7XG5cbi8vIHRoaXMgaGVscGVyIGJyb2tlbiBpbiBgMy40LjEtMy40LjRgLCBzbyB3ZSBjYW4ndCB1c2UgYHNoYXJlZGAgaGVscGVyXG5pZiAodHlwZW9mIHN0b3JlLmluc3BlY3RTb3VyY2UgIT0gJ2Z1bmN0aW9uJykge1xuICBzdG9yZS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uVG9TdHJpbmcuY2FsbChpdCk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RvcmUuaW5zcGVjdFNvdXJjZTtcbiIsInZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBvYmplY3RIYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xudmFyIHNldCwgZ2V0LCBoYXM7XG5cbnZhciBlbmZvcmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBoYXMoaXQpID8gZ2V0KGl0KSA6IHNldChpdCwge30pO1xufTtcblxudmFyIGdldHRlckZvciA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgc3RhdGU7XG4gICAgaWYgKCFpc09iamVjdChpdCkgfHwgKHN0YXRlID0gZ2V0KGl0KSkudHlwZSAhPT0gVFlQRSkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCcpO1xuICAgIH0gcmV0dXJuIHN0YXRlO1xuICB9O1xufTtcblxuaWYgKE5BVElWRV9XRUFLX01BUCkge1xuICB2YXIgc3RvcmUgPSBzaGFyZWQuc3RhdGUgfHwgKHNoYXJlZC5zdGF0ZSA9IG5ldyBXZWFrTWFwKCkpO1xuICB2YXIgd21nZXQgPSBzdG9yZS5nZXQ7XG4gIHZhciB3bWhhcyA9IHN0b3JlLmhhcztcbiAgdmFyIHdtc2V0ID0gc3RvcmUuc2V0O1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgbWV0YWRhdGEuZmFjYWRlID0gaXQ7XG4gICAgd21zZXQuY2FsbChzdG9yZSwgaXQsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB3bWdldC5jYWxsKHN0b3JlLCBpdCkgfHwge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB3bWhhcy5jYWxsKHN0b3JlLCBpdCk7XG4gIH07XG59IGVsc2Uge1xuICB2YXIgU1RBVEUgPSBzaGFyZWRLZXkoJ3N0YXRlJyk7XG4gIGhpZGRlbktleXNbU1RBVEVdID0gdHJ1ZTtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIG1ldGFkYXRhLmZhY2FkZSA9IGl0O1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShpdCwgU1RBVEUsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBvYmplY3RIYXMoaXQsIFNUQVRFKSA/IGl0W1NUQVRFXSA6IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gb2JqZWN0SGFzKGl0LCBTVEFURSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldCxcbiAgZ2V0OiBnZXQsXG4gIGhhczogaGFzLFxuICBlbmZvcmNlOiBlbmZvcmNlLFxuICBnZXR0ZXJGb3I6IGdldHRlckZvclxufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG5cbi8vIGBJc0FycmF5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXNhcnJheVxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIHJldHVybiBjbGFzc29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIHJlcGxhY2VtZW50ID0gLyN8XFwucHJvdG90eXBlXFwuLztcblxudmFyIGlzRm9yY2VkID0gZnVuY3Rpb24gKGZlYXR1cmUsIGRldGVjdGlvbikge1xuICB2YXIgdmFsdWUgPSBkYXRhW25vcm1hbGl6ZShmZWF0dXJlKV07XG4gIHJldHVybiB2YWx1ZSA9PSBQT0xZRklMTCA/IHRydWVcbiAgICA6IHZhbHVlID09IE5BVElWRSA/IGZhbHNlXG4gICAgOiB0eXBlb2YgZGV0ZWN0aW9uID09ICdmdW5jdGlvbicgPyBmYWlscyhkZXRlY3Rpb24pXG4gICAgOiAhIWRldGVjdGlvbjtcbn07XG5cbnZhciBub3JtYWxpemUgPSBpc0ZvcmNlZC5ub3JtYWxpemUgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHJldHVybiBTdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlcGxhY2VtZW50LCAnLicpLnRvTG93ZXJDYXNlKCk7XG59O1xuXG52YXIgZGF0YSA9IGlzRm9yY2VkLmRhdGEgPSB7fTtcbnZhciBOQVRJVkUgPSBpc0ZvcmNlZC5OQVRJVkUgPSAnTic7XG52YXIgUE9MWUZJTEwgPSBpc0ZvcmNlZC5QT0xZRklMTCA9ICdQJztcblxubW9kdWxlLmV4cG9ydHMgPSBpc0ZvcmNlZDtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICEhT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBDaHJvbWUgMzggU3ltYm9sIGhhcyBpbmNvcnJlY3QgdG9TdHJpbmcgY29udmVyc2lvblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgcmV0dXJuICFTdHJpbmcoU3ltYm9sKCkpO1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcblxudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcblxubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoaW5zcGVjdFNvdXJjZShXZWFrTWFwKSk7XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZGVmaW5lUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaHRtbCcpO1xudmFyIGRvY3VtZW50Q3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG5cbnZhciBHVCA9ICc+JztcbnZhciBMVCA9ICc8JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBTQ1JJUFQgPSAnc2NyaXB0JztcbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcblxudmFyIEVtcHR5Q29uc3RydWN0b3IgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG5cbnZhciBzY3JpcHRUYWcgPSBmdW5jdGlvbiAoY29udGVudCkge1xuICByZXR1cm4gTFQgKyBTQ1JJUFQgKyBHVCArIGNvbnRlbnQgKyBMVCArICcvJyArIFNDUklQVCArIEdUO1xufTtcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIEFjdGl2ZVggT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYID0gZnVuY3Rpb24gKGFjdGl2ZVhEb2N1bWVudCkge1xuICBhY3RpdmVYRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCcnKSk7XG4gIGFjdGl2ZVhEb2N1bWVudC5jbG9zZSgpO1xuICB2YXIgdGVtcCA9IGFjdGl2ZVhEb2N1bWVudC5wYXJlbnRXaW5kb3cuT2JqZWN0O1xuICBhY3RpdmVYRG9jdW1lbnQgPSBudWxsOyAvLyBhdm9pZCBtZW1vcnkgbGVha1xuICByZXR1cm4gdGVtcDtcbn07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBOdWxsUHJvdG9PYmplY3RWaWFJRnJhbWUgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSBkb2N1bWVudENyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICB2YXIgSlMgPSAnamF2YScgKyBTQ1JJUFQgKyAnOic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIGh0bWwuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzQ3NVxuICBpZnJhbWUuc3JjID0gU3RyaW5nKEpTKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShzY3JpcHRUYWcoJ2RvY3VtZW50LkY9T2JqZWN0JykpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICByZXR1cm4gaWZyYW1lRG9jdW1lbnQuRjtcbn07XG5cbi8vIENoZWNrIGZvciBkb2N1bWVudC5kb21haW4gYW5kIGFjdGl2ZSB4IHN1cHBvcnRcbi8vIE5vIG5lZWQgdG8gdXNlIGFjdGl2ZSB4IGFwcHJvYWNoIHdoZW4gZG9jdW1lbnQuZG9tYWluIGlzIG5vdCBzZXRcbi8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vaXNzdWVzLzE1MFxuLy8gdmFyaWF0aW9uIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9raXRjYW1icmlkZ2UvZXM1LXNoaW0vY29tbWl0LzRmNzM4YWMwNjYzNDZcbi8vIGF2b2lkIElFIEdDIGJ1Z1xudmFyIGFjdGl2ZVhEb2N1bWVudDtcbnZhciBOdWxsUHJvdG9PYmplY3QgPSBmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgLyogZ2xvYmFsIEFjdGl2ZVhPYmplY3QgKi9cbiAgICBhY3RpdmVYRG9jdW1lbnQgPSBkb2N1bWVudC5kb21haW4gJiYgbmV3IEFjdGl2ZVhPYmplY3QoJ2h0bWxmaWxlJyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGlnbm9yZSAqLyB9XG4gIE51bGxQcm90b09iamVjdCA9IGFjdGl2ZVhEb2N1bWVudCA/IE51bGxQcm90b09iamVjdFZpYUFjdGl2ZVgoYWN0aXZlWERvY3VtZW50KSA6IE51bGxQcm90b09iamVjdFZpYUlGcmFtZSgpO1xuICB2YXIgbGVuZ3RoID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIGRlbGV0ZSBOdWxsUHJvdG9PYmplY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tsZW5ndGhdXTtcbiAgcmV0dXJuIE51bGxQcm90b09iamVjdCgpO1xufTtcblxuaGlkZGVuS2V5c1tJRV9QUk9UT10gPSB0cnVlO1xuXG4vLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eUNvbnN0cnVjdG9yKCk7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBOdWxsUHJvdG9PYmplY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRlZmluZVByb3BlcnRpZXMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydGllc1xubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKE8sIGtleSA9IGtleXNbaW5kZXgrK10sIFByb3BlcnRpZXNba2V5XSk7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG5cbnZhciBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCcpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcblxudmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvclxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoIXByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwidmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xuXG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nXG4gICAgPyBnZXRXaW5kb3dOYW1lcyhpdClcbiAgICA6IG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXModG9JbmRleGVkT2JqZWN0KGl0KSk7XG59O1xuIiwidmFyIGludGVybmFsT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcblxudmFyIGhpZGRlbktleXMgPSBlbnVtQnVnS2V5cy5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGluZGV4T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmRleE9mO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgIWhhcyhoaWRkZW5LZXlzLCBrZXkpICYmIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+aW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbi8vIGBPYmplY3Qua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5rZXlzXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBOYXNob3JuIH4gSkRLOCBidWdcbnZhciBOQVNIT1JOX0JVRyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiAhbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh7IDE6IDIgfSwgMSk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eWlzZW51bWVyYWJsZVxuZXhwb3J0cy5mID0gTkFTSE9STl9CVUcgPyBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRoaXMsIFYpO1xuICByZXR1cm4gISFkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IuZW51bWVyYWJsZTtcbn0gOiBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnb3duS2V5cycpIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBlbmZvcmNlSW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZW5mb3JjZTtcbnZhciBURU1QTEFURSA9IFN0cmluZyhTdHJpbmcpLnNwbGl0KCdTdHJpbmcnKTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgdmFyIHVuc2FmZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMudW5zYWZlIDogZmFsc2U7XG4gIHZhciBzaW1wbGUgPSBvcHRpb25zID8gISFvcHRpb25zLmVudW1lcmFibGUgOiBmYWxzZTtcbiAgdmFyIG5vVGFyZ2V0R2V0ID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5ub1RhcmdldEdldCA6IGZhbHNlO1xuICB2YXIgc3RhdGU7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmICh0eXBlb2Yga2V5ID09ICdzdHJpbmcnICYmICFoYXModmFsdWUsICduYW1lJykpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSh2YWx1ZSwgJ25hbWUnLCBrZXkpO1xuICAgIH1cbiAgICBzdGF0ZSA9IGVuZm9yY2VJbnRlcm5hbFN0YXRlKHZhbHVlKTtcbiAgICBpZiAoIXN0YXRlLnNvdXJjZSkge1xuICAgICAgc3RhdGUuc291cmNlID0gVEVNUExBVEUuam9pbih0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8ga2V5IDogJycpO1xuICAgIH1cbiAgfVxuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gICAgZWxzZSBzZXRHbG9iYWwoa2V5LCB2YWx1ZSk7XG4gICAgcmV0dXJuO1xuICB9IGVsc2UgaWYgKCF1bnNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICB9IGVsc2UgaWYgKCFub1RhcmdldEdldCAmJiBPW2tleV0pIHtcbiAgICBzaW1wbGUgPSB0cnVlO1xuICB9XG4gIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICBlbHNlIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShPLCBrZXksIHZhbHVlKTtcbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5zb3VyY2UgfHwgaW5zcGVjdFNvdXJjZSh0aGlzKTtcbn0pO1xuIiwiLy8gYFJlcXVpcmVPYmplY3RDb2VyY2libGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZXF1aXJlb2JqZWN0Y29lcmNpYmxlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGdsb2JhbCwga2V5LCB2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZ2xvYmFsW2tleV0gPSB2YWx1ZTtcbiAgfSByZXR1cm4gdmFsdWU7XG59O1xuIiwidmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBUQUcsIFNUQVRJQykge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IFNUQVRJQyA/IGl0IDogaXQucHJvdG90eXBlLCBUT19TVFJJTkdfVEFHKSkge1xuICAgIGRlZmluZVByb3BlcnR5KGl0LCBUT19TVFJJTkdfVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IFRBRyB9KTtcbiAgfVxufTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xuXG52YXIga2V5cyA9IHNoYXJlZCgna2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGtleXNba2V5XSB8fCAoa2V5c1trZXldID0gdWlkKGtleSkpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcblxudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgc2V0R2xvYmFsKFNIQVJFRCwge30pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlO1xuIiwidmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogJzMuOC4yJyxcbiAgbW9kZTogSVNfUFVSRSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDIxIERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcblxudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBIZWxwZXIgZm9yIGEgcG9wdWxhciByZXBlYXRpbmcgY2FzZSBvZiB0aGUgc3BlYzpcbi8vIExldCBpbnRlZ2VyIGJlID8gVG9JbnRlZ2VyKGluZGV4KS5cbi8vIElmIGludGVnZXIgPCAwLCBsZXQgcmVzdWx0IGJlIG1heCgobGVuZ3RoICsgaW50ZWdlciksIDApOyBlbHNlIGxldCByZXN1bHQgYmUgbWluKGludGVnZXIsIGxlbmd0aCkuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIHZhciBpbnRlZ2VyID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGludGVnZXIgPCAwID8gbWF4KGludGVnZXIgKyBsZW5ndGgsIDApIDogbWluKGludGVnZXIsIGxlbmd0aCk7XG59O1xuIiwiLy8gdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEluZGV4ZWRPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShpdCkpO1xufTtcbiIsInZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxuLy8gYFRvSW50ZWdlcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvaW50ZWdlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGlzTmFOKGFyZ3VtZW50ID0gK2FyZ3VtZW50KSA/IDAgOiAoYXJndW1lbnQgPiAwID8gZmxvb3IgOiBjZWlsKShhcmd1bWVudCk7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG5cbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gYFRvTGVuZ3RoYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9sZW5ndGhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBhcmd1bWVudCA+IDAgPyBtaW4odG9JbnRlZ2VyKGFyZ3VtZW50KSwgMHgxRkZGRkZGRkZGRkZGRikgOiAwOyAvLyAyICoqIDUzIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwidmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbi8vIGBUb09iamVjdGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvb2JqZWN0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpKTtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbi8vIGBUb1ByaW1pdGl2ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvcHJpbWl0aXZlXG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlucHV0LCBQUkVGRVJSRURfU1RSSU5HKSB7XG4gIGlmICghaXNPYmplY3QoaW5wdXQpKSByZXR1cm4gaW5wdXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUFJFRkVSUkVEX1NUUklORyAmJiB0eXBlb2YgKGZuID0gaW5wdXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpbnB1dC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUFJFRkVSUkVEX1NUUklORyAmJiB0eXBlb2YgKGZuID0gaW5wdXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsInZhciBpZCA9IDA7XG52YXIgcG9zdGZpeCA9IE1hdGgucmFuZG9tKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnICsgU3RyaW5nKGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXkpICsgJylfJyArICgrK2lkICsgcG9zdGZpeCkudG9TdHJpbmcoMzYpO1xufTtcbiIsInZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfU1lNQk9MXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAmJiAhU3ltYm9sLnNoYW1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCc7XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbmV4cG9ydHMuZiA9IHdlbGxLbm93blN5bWJvbDtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG52YXIgVVNFX1NZTUJPTF9BU19VSUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQnKTtcblxudmFyIFdlbGxLbm93blN5bWJvbHNTdG9yZSA9IHNoYXJlZCgnd2tzJyk7XG52YXIgU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBjcmVhdGVXZWxsS25vd25TeW1ib2wgPSBVU0VfU1lNQk9MX0FTX1VJRCA/IFN5bWJvbCA6IFN5bWJvbCAmJiBTeW1ib2wud2l0aG91dFNldHRlciB8fCB1aWQ7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgaWYgKCFoYXMoV2VsbEtub3duU3ltYm9sc1N0b3JlLCBuYW1lKSkge1xuICAgIGlmIChOQVRJVkVfU1lNQk9MICYmIGhhcyhTeW1ib2wsIG5hbWUpKSBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBTeW1ib2xbbmFtZV07XG4gICAgZWxzZSBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBjcmVhdGVXZWxsS25vd25TeW1ib2woJ1N5bWJvbC4nICsgbmFtZSk7XG4gIH0gcmV0dXJuIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xuXG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEUgPSB3ZWxsS25vd25TeW1ib2woJ2lzQ29uY2F0U3ByZWFkYWJsZScpO1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSAweDFGRkZGRkZGRkZGRkZGO1xudmFyIE1BWElNVU1fQUxMT1dFRF9JTkRFWF9FWENFRURFRCA9ICdNYXhpbXVtIGFsbG93ZWQgaW5kZXggZXhjZWVkZWQnO1xuXG4vLyBXZSBjYW4ndCB1c2UgdGhpcyBmZWF0dXJlIGRldGVjdGlvbiBpbiBWOCBzaW5jZSBpdCBjYXVzZXNcbi8vIGRlb3B0aW1pemF0aW9uIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc5XG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCA9IFY4X1ZFUlNJT04gPj0gNTEgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGFycmF5ID0gW107XG4gIGFycmF5W0lTX0NPTkNBVF9TUFJFQURBQkxFXSA9IGZhbHNlO1xuICByZXR1cm4gYXJyYXkuY29uY2F0KClbMF0gIT09IGFycmF5O1xufSk7XG5cbnZhciBTUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdjb25jYXQnKTtcblxudmFyIGlzQ29uY2F0U3ByZWFkYWJsZSA9IGZ1bmN0aW9uIChPKSB7XG4gIGlmICghaXNPYmplY3QoTykpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNwcmVhZGFibGUgPSBPW0lTX0NPTkNBVF9TUFJFQURBQkxFXTtcbiAgcmV0dXJuIHNwcmVhZGFibGUgIT09IHVuZGVmaW5lZCA/ICEhc3ByZWFkYWJsZSA6IGlzQXJyYXkoTyk7XG59O1xuXG52YXIgRk9SQ0VEID0gIUlTX0NPTkNBVF9TUFJFQURBQkxFX1NVUFBPUlQgfHwgIVNQRUNJRVNfU1VQUE9SVDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5jb25jYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuY29uY2F0XG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAaXNDb25jYXRTcHJlYWRhYmxlIGFuZCBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIGNvbmNhdDogZnVuY3Rpb24gY29uY2F0KGFyZykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICB2YXIgbiA9IDA7XG4gICAgdmFyIGksIGssIGxlbmd0aCwgbGVuLCBFO1xuICAgIGZvciAoaSA9IC0xLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIEUgPSBpID09PSAtMSA/IE8gOiBhcmd1bWVudHNbaV07XG4gICAgICBpZiAoaXNDb25jYXRTcHJlYWRhYmxlKEUpKSB7XG4gICAgICAgIGxlbiA9IHRvTGVuZ3RoKEUubGVuZ3RoKTtcbiAgICAgICAgaWYgKG4gKyBsZW4gPiBNQVhfU0FGRV9JTlRFR0VSKSB0aHJvdyBUeXBlRXJyb3IoTUFYSU1VTV9BTExPV0VEX0lOREVYX0VYQ0VFREVEKTtcbiAgICAgICAgZm9yIChrID0gMDsgayA8IGxlbjsgaysrLCBuKyspIGlmIChrIGluIEUpIGNyZWF0ZVByb3BlcnR5KEEsIG4sIEVba10pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG4gPj0gTUFYX1NBRkVfSU5URUdFUikgdGhyb3cgVHlwZUVycm9yKE1BWElNVU1fQUxMT1dFRF9JTkRFWF9FWENFRURFRCk7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KEEsIG4rKywgRSk7XG4gICAgICB9XG4gICAgfVxuICAgIEEubGVuZ3RoID0gbjtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZvci1lYWNoJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBbXS5mb3JFYWNoICE9IGZvckVhY2ggfSwge1xuICBmb3JFYWNoOiBmb3JFYWNoXG59KTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xuXG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgRnVuY3Rpb25Qcm90b3R5cGVUb1N0cmluZyA9IEZ1bmN0aW9uUHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIG5hbWVSRSA9IC9eXFxzKmZ1bmN0aW9uIChbXiAoXSopLztcbnZhciBOQU1FID0gJ25hbWUnO1xuXG4vLyBGdW5jdGlvbiBpbnN0YW5jZXMgYC5uYW1lYCBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1mdW5jdGlvbi1pbnN0YW5jZXMtbmFtZVxuaWYgKERFU0NSSVBUT1JTICYmICEoTkFNRSBpbiBGdW5jdGlvblByb3RvdHlwZSkpIHtcbiAgZGVmaW5lUHJvcGVydHkoRnVuY3Rpb25Qcm90b3R5cGUsIE5BTUUsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb25Qcm90b3R5cGVUb1N0cmluZy5jYWxsKHRoaXMpLm1hdGNoKG5hbWVSRSlbMV07XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cbiIsIi8vIGBTeW1ib2wucHJvdG90eXBlLmRlc2NyaXB0aW9uYCBnZXR0ZXJcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS5kZXNjcmlwdGlvblxuJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG5cbnZhciBOYXRpdmVTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xuXG5pZiAoREVTQ1JJUFRPUlMgJiYgdHlwZW9mIE5hdGl2ZVN5bWJvbCA9PSAnZnVuY3Rpb24nICYmICghKCdkZXNjcmlwdGlvbicgaW4gTmF0aXZlU3ltYm9sLnByb3RvdHlwZSkgfHxcbiAgLy8gU2FmYXJpIDEyIGJ1Z1xuICBOYXRpdmVTeW1ib2woKS5kZXNjcmlwdGlvbiAhPT0gdW5kZWZpbmVkXG4pKSB7XG4gIHZhciBFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmUgPSB7fTtcbiAgLy8gd3JhcCBTeW1ib2wgY29uc3RydWN0b3IgZm9yIGNvcnJlY3Qgd29yayB3aXRoIHVuZGVmaW5lZCBkZXNjcmlwdGlvblxuICB2YXIgU3ltYm9sV3JhcHBlciA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSBhcmd1bWVudHMubGVuZ3RoIDwgMSB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IFN0cmluZyhhcmd1bWVudHNbMF0pO1xuICAgIHZhciByZXN1bHQgPSB0aGlzIGluc3RhbmNlb2YgU3ltYm9sV3JhcHBlclxuICAgICAgPyBuZXcgTmF0aXZlU3ltYm9sKGRlc2NyaXB0aW9uKVxuICAgICAgLy8gaW4gRWRnZSAxMywgU3RyaW5nKFN5bWJvbCh1bmRlZmluZWQpKSA9PT0gJ1N5bWJvbCh1bmRlZmluZWQpJ1xuICAgICAgOiBkZXNjcmlwdGlvbiA9PT0gdW5kZWZpbmVkID8gTmF0aXZlU3ltYm9sKCkgOiBOYXRpdmVTeW1ib2woZGVzY3JpcHRpb24pO1xuICAgIGlmIChkZXNjcmlwdGlvbiA9PT0gJycpIEVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZVtyZXN1bHRdID0gdHJ1ZTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKFN5bWJvbFdyYXBwZXIsIE5hdGl2ZVN5bWJvbCk7XG4gIHZhciBzeW1ib2xQcm90b3R5cGUgPSBTeW1ib2xXcmFwcGVyLnByb3RvdHlwZSA9IE5hdGl2ZVN5bWJvbC5wcm90b3R5cGU7XG4gIHN5bWJvbFByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN5bWJvbFdyYXBwZXI7XG5cbiAgdmFyIHN5bWJvbFRvU3RyaW5nID0gc3ltYm9sUHJvdG90eXBlLnRvU3RyaW5nO1xuICB2YXIgbmF0aXZlID0gU3RyaW5nKE5hdGl2ZVN5bWJvbCgndGVzdCcpKSA9PSAnU3ltYm9sKHRlc3QpJztcbiAgdmFyIHJlZ2V4cCA9IC9eU3ltYm9sXFwoKC4qKVxcKVteKV0rJC87XG4gIGRlZmluZVByb3BlcnR5KHN5bWJvbFByb3RvdHlwZSwgJ2Rlc2NyaXB0aW9uJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGRlc2NyaXB0aW9uKCkge1xuICAgICAgdmFyIHN5bWJvbCA9IGlzT2JqZWN0KHRoaXMpID8gdGhpcy52YWx1ZU9mKCkgOiB0aGlzO1xuICAgICAgdmFyIHN0cmluZyA9IHN5bWJvbFRvU3RyaW5nLmNhbGwoc3ltYm9sKTtcbiAgICAgIGlmIChoYXMoRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlLCBzeW1ib2wpKSByZXR1cm4gJyc7XG4gICAgICB2YXIgZGVzYyA9IG5hdGl2ZSA/IHN0cmluZy5zbGljZSg3LCAtMSkgOiBzdHJpbmcucmVwbGFjZShyZWdleHAsICckMScpO1xuICAgICAgcmV0dXJuIGRlc2MgPT09ICcnID8gdW5kZWZpbmVkIDogZGVzYztcbiAgICB9XG4gIH0pO1xuXG4gICQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gICAgU3ltYm9sOiBTeW1ib2xXcmFwcGVyXG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcbnZhciBVU0VfU1lNQk9MX0FTX1VJRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBuYXRpdmVPYmplY3RDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLWV4dGVybmFsJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkJyk7XG52YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZvckVhY2g7XG5cbnZhciBISURERU4gPSBzaGFyZWRLZXkoJ2hpZGRlbicpO1xudmFyIFNZTUJPTCA9ICdTeW1ib2wnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFRPX1BSSU1JVElWRSA9IHdlbGxLbm93blN5bWJvbCgndG9QcmltaXRpdmUnKTtcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFNZTUJPTCk7XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJHN0cmluZ2lmeSA9IGdldEJ1aWx0SW4oJ0pTT04nLCAnc3RyaW5naWZ5Jyk7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG52YXIgbmF0aXZlRGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwuZjtcbnZhciBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmY7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvdHlwZVN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzdHJpbmctdG8tc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXRvLXN0cmluZy1yZWdpc3RyeScpO1xudmFyIFdlbGxLbm93blN5bWJvbHNTdG9yZSA9IHNoYXJlZCgnd2tzJyk7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgVVNFX1NFVFRFUiA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2NyaXB0b3IgPSBERVNDUklQVE9SUyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RDcmVhdGUobmF0aXZlRGVmaW5lUHJvcGVydHkoe30sICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkodGhpcywgJ2EnLCB7IHZhbHVlOiA3IH0pLmE7IH1cbiAgfSkpLmEgIT0gNztcbn0pID8gZnVuY3Rpb24gKE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgdmFyIE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0UHJvdG90eXBlLCBQKTtcbiAgaWYgKE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IpIGRlbGV0ZSBPYmplY3RQcm90b3R5cGVbUF07XG4gIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xuICBpZiAoT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciAmJiBPICE9PSBPYmplY3RQcm90b3R5cGUpIHtcbiAgICBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPYmplY3RQcm90b3R5cGUsIFAsIE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IpO1xuICB9XG59IDogbmF0aXZlRGVmaW5lUHJvcGVydHk7XG5cbnZhciB3cmFwID0gZnVuY3Rpb24gKHRhZywgZGVzY3JpcHRpb24pIHtcbiAgdmFyIHN5bWJvbCA9IEFsbFN5bWJvbHNbdGFnXSA9IG5hdGl2ZU9iamVjdENyZWF0ZSgkU3ltYm9sW1BST1RPVFlQRV0pO1xuICBzZXRJbnRlcm5hbFN0YXRlKHN5bWJvbCwge1xuICAgIHR5cGU6IFNZTUJPTCxcbiAgICB0YWc6IHRhZyxcbiAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb25cbiAgfSk7XG4gIGlmICghREVTQ1JJUFRPUlMpIHN5bWJvbC5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICByZXR1cm4gc3ltYm9sO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX1NZTUJPTF9BU19VSUQgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChpdCkgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgaWYgKE8gPT09IE9iamVjdFByb3RvdHlwZSkgJGRlZmluZVByb3BlcnR5KE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIFAsIEF0dHJpYnV0ZXMpO1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleSA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFBdHRyaWJ1dGVzLmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKE8sIEhJRERFTikpIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIEhJRERFTiwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHt9KSk7XG4gICAgICBPW0hJRERFTl1ba2V5XSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChoYXMoTywgSElEREVOKSAmJiBPW0hJRERFTl1ba2V5XSkgT1tISURERU5dW2tleV0gPSBmYWxzZTtcbiAgICAgIEF0dHJpYnV0ZXMgPSBuYXRpdmVPYmplY3RDcmVhdGUoQXR0cmlidXRlcywgeyBlbnVtZXJhYmxlOiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2NyaXB0b3IoTywga2V5LCBBdHRyaWJ1dGVzKTtcbiAgfSByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkoTywga2V5LCBBdHRyaWJ1dGVzKTtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIHByb3BlcnRpZXMgPSB0b0luZGV4ZWRPYmplY3QoUHJvcGVydGllcyk7XG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhwcm9wZXJ0aWVzKS5jb25jYXQoJGdldE93blByb3BlcnR5U3ltYm9scyhwcm9wZXJ0aWVzKSk7XG4gICRmb3JFYWNoKGtleXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIURFU0NSSVBUT1JTIHx8ICRwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHByb3BlcnRpZXMsIGtleSkpICRkZWZpbmVQcm9wZXJ0eShPLCBrZXksIHByb3BlcnRpZXNba2V5XSk7XG4gIH0pO1xuICByZXR1cm4gTztcbn07XG5cbnZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IG5hdGl2ZU9iamVjdENyZWF0ZShPKSA6ICRkZWZpbmVQcm9wZXJ0aWVzKG5hdGl2ZU9iamVjdENyZWF0ZShPKSwgUHJvcGVydGllcyk7XG59O1xuXG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoVikge1xuICB2YXIgUCA9IHRvUHJpbWl0aXZlKFYsIHRydWUpO1xuICB2YXIgZW51bWVyYWJsZSA9IG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodGhpcywgUCk7XG4gIGlmICh0aGlzID09PSBPYmplY3RQcm90b3R5cGUgJiYgaGFzKEFsbFN5bWJvbHMsIFApICYmICFoYXMoT2JqZWN0UHJvdG90eXBlU3ltYm9scywgUCkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIGVudW1lcmFibGUgfHwgIWhhcyh0aGlzLCBQKSB8fCAhaGFzKEFsbFN5bWJvbHMsIFApIHx8IGhhcyh0aGlzLCBISURERU4pICYmIHRoaXNbSElEREVOXVtQXSA/IGVudW1lcmFibGUgOiB0cnVlO1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICB2YXIgaXQgPSB0b0luZGV4ZWRPYmplY3QoTyk7XG4gIHZhciBrZXkgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90b3R5cGUgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBkZXNjcmlwdG9yID0gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpO1xuICBpZiAoZGVzY3JpcHRvciAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKSB7XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZGVzY3JpcHRvcjtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICB2YXIgbmFtZXMgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKHRvSW5kZXhlZE9iamVjdChPKSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgJGZvckVhY2gobmFtZXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoaGlkZGVuS2V5cywga2V5KSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhPKSB7XG4gIHZhciBJU19PQkpFQ1RfUFJPVE9UWVBFID0gTyA9PT0gT2JqZWN0UHJvdG90eXBlO1xuICB2YXIgbmFtZXMgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKElTX09CSkVDVF9QUk9UT1RZUEUgPyBPYmplY3RQcm90b3R5cGVTeW1ib2xzIDogdG9JbmRleGVkT2JqZWN0KE8pKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICAkZm9yRWFjaChuYW1lcywgZnVuY3Rpb24gKGtleSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSAmJiAoIUlTX09CSkVDVF9QUk9UT1RZUEUgfHwgaGFzKE9iamVjdFByb3RvdHlwZSwga2V5KSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIGBTeW1ib2xgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC1jb25zdHJ1Y3RvclxuaWYgKCFOQVRJVkVfU1lNQk9MKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvcicpO1xuICAgIHZhciBkZXNjcmlwdGlvbiA9ICFhcmd1bWVudHMubGVuZ3RoIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogU3RyaW5nKGFyZ3VtZW50c1swXSk7XG4gICAgdmFyIHRhZyA9IHVpZChkZXNjcmlwdGlvbik7XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvdHlwZSkgc2V0dGVyLmNhbGwoT2JqZWN0UHJvdG90eXBlU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjcmlwdG9yKHRoaXMsIHRhZywgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgVVNFX1NFVFRFUikgc2V0U3ltYm9sRGVzY3JpcHRvcihPYmplY3RQcm90b3R5cGUsIHRhZywgeyBjb25maWd1cmFibGU6IHRydWUsIHNldDogc2V0dGVyIH0pO1xuICAgIHJldHVybiB3cmFwKHRhZywgZGVzY3JpcHRpb24pO1xuICB9O1xuXG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcykudGFnO1xuICB9KTtcblxuICByZWRlZmluZSgkU3ltYm9sLCAnd2l0aG91dFNldHRlcicsIGZ1bmN0aW9uIChkZXNjcmlwdGlvbikge1xuICAgIHJldHVybiB3cmFwKHVpZChkZXNjcmlwdGlvbiksIGRlc2NyaXB0aW9uKTtcbiAgfSk7XG5cbiAgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZiA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZS5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3ZWxsS25vd25TeW1ib2wobmFtZSksIG5hbWUpO1xuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLVN5bWJvbC1kZXNjcmlwdGlvblxuICAgIG5hdGl2ZURlZmluZVByb3BlcnR5KCRTeW1ib2xbUFJPVE9UWVBFXSwgJ2Rlc2NyaXB0aW9uJywge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBkZXNjcmlwdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcykuZGVzY3JpcHRpb247XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFJU19QVVJFKSB7XG4gICAgICByZWRlZmluZShPYmplY3RQcm90b3R5cGUsICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgeyB1bnNhZmU6IHRydWUgfSk7XG4gICAgfVxuICB9XG59XG5cbiQoeyBnbG9iYWw6IHRydWUsIHdyYXA6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wsIHNoYW06ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgU3ltYm9sOiAkU3ltYm9sXG59KTtcblxuJGZvckVhY2gob2JqZWN0S2V5cyhXZWxsS25vd25TeW1ib2xzU3RvcmUpLCBmdW5jdGlvbiAobmFtZSkge1xuICBkZWZpbmVXZWxsS25vd25TeW1ib2wobmFtZSk7XG59KTtcblxuJCh7IHRhcmdldDogU1lNQk9MLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgLy8gYFN5bWJvbC5mb3JgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5mb3JcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgc3RyaW5nID0gU3RyaW5nKGtleSk7XG4gICAgaWYgKGhhcyhTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5LCBzdHJpbmcpKSByZXR1cm4gU3RyaW5nVG9TeW1ib2xSZWdpc3RyeVtzdHJpbmddO1xuICAgIHZhciBzeW1ib2wgPSAkU3ltYm9sKHN0cmluZyk7XG4gICAgU3RyaW5nVG9TeW1ib2xSZWdpc3RyeVtzdHJpbmddID0gc3ltYm9sO1xuICAgIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnlbc3ltYm9sXSA9IHN0cmluZztcbiAgICByZXR1cm4gc3ltYm9sO1xuICB9LFxuICAvLyBgU3ltYm9sLmtleUZvcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLmtleWZvclxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IFR5cGVFcnJvcihzeW0gKyAnIGlzIG5vdCBhIHN5bWJvbCcpO1xuICAgIGlmIChoYXMoU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSwgc3ltKSkgcmV0dXJuIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnlbc3ltXTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IFVTRV9TRVRURVIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHsgVVNFX1NFVFRFUiA9IGZhbHNlOyB9XG59KTtcblxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIC8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuY3JlYXRlXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Jcbn0pO1xuXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlzeW1ib2xzXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIENocm9tZSAzOCBhbmQgMzkgYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIGZhaWxzIG9uIHByaW1pdGl2ZXNcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM0NDNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IGZhaWxzKGZ1bmN0aW9uICgpIHsgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmYoMSk7IH0pIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmYodG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG5cbi8vIGBKU09OLnN0cmluZ2lmeWAgbWV0aG9kIGJlaGF2aW9yIHdpdGggc3ltYm9sc1xuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1qc29uLnN0cmluZ2lmeVxuaWYgKCRzdHJpbmdpZnkpIHtcbiAgdmFyIEZPUkNFRF9KU09OX1NUUklOR0lGWSA9ICFOQVRJVkVfU1lNQk9MIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3ltYm9sID0gJFN5bWJvbCgpO1xuICAgIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gICAgcmV0dXJuICRzdHJpbmdpZnkoW3N5bWJvbF0pICE9ICdbbnVsbF0nXG4gICAgICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgICAgIHx8ICRzdHJpbmdpZnkoeyBhOiBzeW1ib2wgfSkgIT0gJ3t9J1xuICAgICAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgICAgIHx8ICRzdHJpbmdpZnkoT2JqZWN0KHN5bWJvbCkpICE9ICd7fSc7XG4gIH0pO1xuXG4gICQoeyB0YXJnZXQ6ICdKU09OJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRURfSlNPTl9TVFJJTkdJRlkgfSwge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0LCByZXBsYWNlciwgc3BhY2UpIHtcbiAgICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICAgIHZhciBpbmRleCA9IDE7XG4gICAgICB2YXIgJHJlcGxhY2VyO1xuICAgICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpbmRleCkgYXJncy5wdXNoKGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgICAkcmVwbGFjZXIgPSByZXBsYWNlcjtcbiAgICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICAgIGlmICghaXNBcnJheShyZXBsYWNlcikpIHJlcGxhY2VyID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICAgIH07XG4gICAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgICByZXR1cm4gJHN0cmluZ2lmeS5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vLyBgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUtQEB0b3ByaW1pdGl2ZVxuaWYgKCEkU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSkge1xuICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbn1cbi8vIGBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddYCBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLUBAdG9zdHJpbmd0YWdcbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsIFNZTUJPTCk7XG5cbmhpZGRlbktleXNbSElEREVOXSA9IHRydWU7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERPTUl0ZXJhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20taXRlcmFibGVzJyk7XG52YXIgZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mb3ItZWFjaCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcblxuZm9yICh2YXIgQ09MTEVDVElPTl9OQU1FIGluIERPTUl0ZXJhYmxlcykge1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdO1xuICB2YXIgQ29sbGVjdGlvblByb3RvdHlwZSA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZSAmJiBDb2xsZWN0aW9uUHJvdG90eXBlLmZvckVhY2ggIT09IGZvckVhY2gpIHRyeSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsICdmb3JFYWNoJywgZm9yRWFjaCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgQ29sbGVjdGlvblByb3RvdHlwZS5mb3JFYWNoID0gZm9yRWFjaDtcbiAgfVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG4vKlxuICBlc2xpbnQtZGlzYWJsZVxuICBuby1jb25zb2xlLFxuICBmdW5jLW5hbWVzXG4qL1xudmFyIG5vcm1hbGl6ZVVybCA9IHJlcXVpcmUoJy4vbm9ybWFsaXplLXVybCcpO1xuXG52YXIgc3JjQnlNb2R1bGVJZCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG52YXIgbm9Eb2N1bWVudCA9IHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCc7XG52YXIgZm9yRWFjaCA9IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoO1xuXG5mdW5jdGlvbiBkZWJvdW5jZShmbiwgdGltZSkge1xuICB2YXIgdGltZW91dCA9IDA7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG5cbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcblxuICAgIHZhciBmdW5jdGlvbkNhbGwgPSBmdW5jdGlvbiBmdW5jdGlvbkNhbGwoKSB7XG4gICAgICByZXR1cm4gZm4uYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgfTtcblxuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICB0aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbkNhbGwsIHRpbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cblxuZnVuY3Rpb24gZ2V0Q3VycmVudFNjcmlwdFVybChtb2R1bGVJZCkge1xuICB2YXIgc3JjID0gc3JjQnlNb2R1bGVJZFttb2R1bGVJZF07XG5cbiAgaWYgKCFzcmMpIHtcbiAgICBpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdCkge1xuICAgICAgc3JjID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpO1xuICAgICAgdmFyIGxhc3RTY3JpcHRUYWcgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV07XG5cbiAgICAgIGlmIChsYXN0U2NyaXB0VGFnKSB7XG4gICAgICAgIHNyYyA9IGxhc3RTY3JpcHRUYWcuc3JjO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNyY0J5TW9kdWxlSWRbbW9kdWxlSWRdID0gc3JjO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChmaWxlTWFwKSB7XG4gICAgaWYgKCFzcmMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBzcGxpdFJlc3VsdCA9IHNyYy5zcGxpdCgvKFteXFxcXC9dKylcXC5qcyQvKTtcbiAgICB2YXIgZmlsZW5hbWUgPSBzcGxpdFJlc3VsdCAmJiBzcGxpdFJlc3VsdFsxXTtcblxuICAgIGlmICghZmlsZW5hbWUpIHtcbiAgICAgIHJldHVybiBbc3JjLnJlcGxhY2UoJy5qcycsICcuY3NzJyldO1xuICAgIH1cblxuICAgIGlmICghZmlsZU1hcCkge1xuICAgICAgcmV0dXJuIFtzcmMucmVwbGFjZSgnLmpzJywgJy5jc3MnKV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGZpbGVNYXAuc3BsaXQoJywnKS5tYXAoZnVuY3Rpb24gKG1hcFJ1bGUpIHtcbiAgICAgIHZhciByZWcgPSBuZXcgUmVnRXhwKFwiXCIuY29uY2F0KGZpbGVuYW1lLCBcIlxcXFwuanMkXCIpLCAnZycpO1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZVVybChzcmMucmVwbGFjZShyZWcsIFwiXCIuY29uY2F0KG1hcFJ1bGUucmVwbGFjZSgve2ZpbGVOYW1lfS9nLCBmaWxlbmFtZSksIFwiLmNzc1wiKSkpO1xuICAgIH0pO1xuICB9O1xufVxuXG5mdW5jdGlvbiB1cGRhdGVDc3MoZWwsIHVybCkge1xuICBpZiAoIXVybCkge1xuICAgIGlmICghZWwuaHJlZikge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cblxuICAgIHVybCA9IGVsLmhyZWYuc3BsaXQoJz8nKVswXTtcbiAgfVxuXG4gIGlmICghaXNVcmxSZXF1ZXN0KHVybCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZWwuaXNMb2FkZWQgPT09IGZhbHNlKSB7XG4gICAgLy8gV2Ugc2VlbSB0byBiZSBhYm91dCB0byByZXBsYWNlIGEgY3NzIGxpbmsgdGhhdCBoYXNuJ3QgbG9hZGVkIHlldC5cbiAgICAvLyBXZSdyZSBwcm9iYWJseSBjaGFuZ2luZyB0aGUgc2FtZSBmaWxlIG1vcmUgdGhhbiBvbmNlLlxuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghdXJsIHx8ICEodXJsLmluZGV4T2YoJy5jc3MnKSA+IC0xKSkge1xuICAgIHJldHVybjtcbiAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cblxuXG4gIGVsLnZpc2l0ZWQgPSB0cnVlO1xuICB2YXIgbmV3RWwgPSBlbC5jbG9uZU5vZGUoKTtcbiAgbmV3RWwuaXNMb2FkZWQgPSBmYWxzZTtcbiAgbmV3RWwuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBuZXdFbC5pc0xvYWRlZCA9IHRydWU7XG4gICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG4gIH0pO1xuICBuZXdFbC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGZ1bmN0aW9uICgpIHtcbiAgICBuZXdFbC5pc0xvYWRlZCA9IHRydWU7XG4gICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG4gIH0pO1xuICBuZXdFbC5ocmVmID0gXCJcIi5jb25jYXQodXJsLCBcIj9cIikuY29uY2F0KERhdGUubm93KCkpO1xuXG4gIGlmIChlbC5uZXh0U2libGluZykge1xuICAgIGVsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld0VsLCBlbC5uZXh0U2libGluZyk7XG4gIH0gZWxzZSB7XG4gICAgZWwucGFyZW50Tm9kZS5hcHBlbmRDaGlsZChuZXdFbCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0UmVsb2FkVXJsKGhyZWYsIHNyYykge1xuICB2YXIgcmV0OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cblxuICBocmVmID0gbm9ybWFsaXplVXJsKGhyZWYsIHtcbiAgICBzdHJpcFdXVzogZmFsc2VcbiAgfSk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBhcnJheS1jYWxsYmFjay1yZXR1cm5cblxuICBzcmMuc29tZShmdW5jdGlvbiAodXJsKSB7XG4gICAgaWYgKGhyZWYuaW5kZXhPZihzcmMpID4gLTEpIHtcbiAgICAgIHJldCA9IHVybDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiByZWxvYWRTdHlsZShzcmMpIHtcbiAgaWYgKCFzcmMpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgZWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdsaW5rJyk7XG4gIHZhciBsb2FkZWQgPSBmYWxzZTtcbiAgZm9yRWFjaC5jYWxsKGVsZW1lbnRzLCBmdW5jdGlvbiAoZWwpIHtcbiAgICBpZiAoIWVsLmhyZWYpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdXJsID0gZ2V0UmVsb2FkVXJsKGVsLmhyZWYsIHNyYyk7XG5cbiAgICBpZiAoIWlzVXJsUmVxdWVzdCh1cmwpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGVsLnZpc2l0ZWQgPT09IHRydWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodXJsKSB7XG4gICAgICB1cGRhdGVDc3MoZWwsIHVybCk7XG4gICAgICBsb2FkZWQgPSB0cnVlO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBsb2FkZWQ7XG59XG5cbmZ1bmN0aW9uIHJlbG9hZEFsbCgpIHtcbiAgdmFyIGVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnbGluaycpO1xuICBmb3JFYWNoLmNhbGwoZWxlbWVudHMsIGZ1bmN0aW9uIChlbCkge1xuICAgIGlmIChlbC52aXNpdGVkID09PSB0cnVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdXBkYXRlQ3NzKGVsKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGlzVXJsUmVxdWVzdCh1cmwpIHtcbiAgLy8gQW4gVVJMIGlzIG5vdCBhbiByZXF1ZXN0IGlmXG4gIC8vIEl0IGlzIG5vdCBodHRwIG9yIGh0dHBzXG4gIGlmICghL15odHRwcz86L2kudGVzdCh1cmwpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1vZHVsZUlkLCBvcHRpb25zKSB7XG4gIGlmIChub0RvY3VtZW50KSB7XG4gICAgY29uc29sZS5sb2coJ25vIHdpbmRvdy5kb2N1bWVudCBmb3VuZCwgd2lsbCBub3QgSE1SIENTUycpO1xuICAgIHJldHVybiBub29wO1xuICB9XG5cbiAgdmFyIGdldFNjcmlwdFNyYyA9IGdldEN1cnJlbnRTY3JpcHRVcmwobW9kdWxlSWQpO1xuXG4gIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICB2YXIgc3JjID0gZ2V0U2NyaXB0U3JjKG9wdGlvbnMuZmlsZW5hbWUpO1xuICAgIHZhciByZWxvYWRlZCA9IHJlbG9hZFN0eWxlKHNyYyk7XG5cbiAgICBpZiAob3B0aW9ucy5sb2NhbHMpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdbSE1SXSBEZXRlY3RlZCBsb2NhbCBjc3MgbW9kdWxlcy4gUmVsb2FkIGFsbCBjc3MnKTtcbiAgICAgIHJlbG9hZEFsbCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChyZWxvYWRlZCkge1xuICAgICAgY29uc29sZS5sb2coJ1tITVJdIGNzcyByZWxvYWQgJXMnLCBzcmMuam9pbignICcpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coJ1tITVJdIFJlbG9hZCBhbGwgY3NzJyk7XG4gICAgICByZWxvYWRBbGwoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGVib3VuY2UodXBkYXRlLCA1MCk7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuZnVuY3Rpb24gbm9ybWFsaXplVXJsKHBhdGhDb21wb25lbnRzKSB7XG4gIHJldHVybiBwYXRoQ29tcG9uZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjY3VtdWxhdG9yLCBpdGVtKSB7XG4gICAgc3dpdGNoIChpdGVtKSB7XG4gICAgICBjYXNlICcuLic6XG4gICAgICAgIGFjY3VtdWxhdG9yLnBvcCgpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnLic6XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBhY2N1bXVsYXRvci5wdXNoKGl0ZW0pO1xuICAgIH1cblxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfSwgW10pLmpvaW4oJy8nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXJsU3RyaW5nKSB7XG4gIHVybFN0cmluZyA9IHVybFN0cmluZy50cmltKCk7XG5cbiAgaWYgKC9eZGF0YTovaS50ZXN0KHVybFN0cmluZykpIHtcbiAgICByZXR1cm4gdXJsU3RyaW5nO1xuICB9XG5cbiAgdmFyIHByb3RvY29sID0gdXJsU3RyaW5nLmluZGV4T2YoJy8vJykgIT09IC0xID8gdXJsU3RyaW5nLnNwbGl0KCcvLycpWzBdICsgJy8vJyA6ICcnO1xuICB2YXIgY29tcG9uZW50cyA9IHVybFN0cmluZy5yZXBsYWNlKG5ldyBSZWdFeHAocHJvdG9jb2wsICdpJyksICcnKS5zcGxpdCgnLycpO1xuICB2YXIgaG9zdCA9IGNvbXBvbmVudHNbMF0udG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXC4kLywgJycpO1xuICBjb21wb25lbnRzWzBdID0gJyc7XG4gIHZhciBwYXRoID0gbm9ybWFsaXplVXJsKGNvbXBvbmVudHMpO1xuICByZXR1cm4gcHJvdG9jb2wgKyBob3N0ICsgcGF0aDtcbn07IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307XG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgLy8gMTYxNzM0NjYwMjgyOVxuICAgICAgdmFyIGNzc1JlbG9hZCA9IHJlcXVpcmUoXCIvaG9tZS9hcHB2ZXlvci9wcm9qZWN0cy9haGotaHR0cC1mcm9udC9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9obXIvaG90TW9kdWxlUmVwbGFjZW1lbnQuanNcIikobW9kdWxlLmlkLCB7XCJsb2NhbHNcIjpmYWxzZX0pO1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGNzc1JlbG9hZCk7XG4gICAgICBtb2R1bGUuaG90LmFjY2VwdCh1bmRlZmluZWQsIGNzc1JlbG9hZCk7XG4gICAgfVxuICAiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBydW50aW1lID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgZnVuY3Rpb24gZGVmaW5lKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gSUUgOCBoYXMgYSBicm9rZW4gT2JqZWN0LmRlZmluZVByb3BlcnR5IHRoYXQgb25seSB3b3JrcyBvbiBET00gb2JqZWN0cy5cbiAgICBkZWZpbmUoe30sIFwiXCIpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBkZWZpbmUgPSBmdW5jdGlvbihvYmosIGtleSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmpba2V5XSA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRlZmluZShcbiAgICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSxcbiAgICB0b1N0cmluZ1RhZ1N5bWJvbCxcbiAgICBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgKTtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBkZWZpbmUocHJvdG90eXBlLCBtZXRob2QsIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBkZWZpbmUoZ2VuRnVuLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKTtcbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yLCBQcm9taXNlSW1wbCkge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlSW1wbChmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBleHBvcnRzLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QsIFByb21pc2VJbXBsKSB7XG4gICAgaWYgKFByb21pc2VJbXBsID09PSB2b2lkIDApIFByb21pc2VJbXBsID0gUHJvbWlzZTtcblxuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSxcbiAgICAgIFByb21pc2VJbXBsXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBkZWZpbmUoR3AsIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvclwiKTtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbn1cbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdGlmKF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0pIHtcblx0XHRyZXR1cm4gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdHZhciBleGVjT3B0aW9ucyA9IHsgaWQ6IG1vZHVsZUlkLCBtb2R1bGU6IG1vZHVsZSwgZmFjdG9yeTogX193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0sIHJlcXVpcmU6IF9fd2VicGFja19yZXF1aXJlX18gfTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5pLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlcikgeyBoYW5kbGVyKGV4ZWNPcHRpb25zKTsgfSk7XG5cdG1vZHVsZSA9IGV4ZWNPcHRpb25zLm1vZHVsZTtcblx0ZXhlY09wdGlvbnMuZmFjdG9yeS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBleGVjT3B0aW9ucy5yZXF1aXJlKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4vLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuX193ZWJwYWNrX3JlcXVpcmVfXy5jID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fO1xuXG4vLyBleHBvc2UgdGhlIG1vZHVsZSBleGVjdXRpb24gaW50ZXJjZXB0b3Jcbl9fd2VicGFja19yZXF1aXJlX18uaSA9IFtdO1xuXG4iLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhbGwgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmh1ID0gKGNodW5rSWQpID0+IHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiBcIlwiICsgY2h1bmtJZCArIFwiLlwiICsgX193ZWJwYWNrX3JlcXVpcmVfXy5oKCkgKyBcIi5ob3QtdXBkYXRlLmpzXCI7XG59OyIsIi8vIFRoaXMgZnVuY3Rpb24gYWxsb3cgdG8gcmVmZXJlbmNlIGFsbCBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18ubWluaUNzc0YgPSAoY2h1bmtJZCkgPT4ge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIFwiXCIgKyBcIm1haW5cIiArIFwiLmNzc1wiO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckYgPSAoKSA9PiBcIm1haW4uXCIgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLmgoKSArIFwiLmhvdC11cGRhdGUuanNvblwiOyIsIl9fd2VicGFja19yZXF1aXJlX18uaCA9ICgpID0+IFwiYTZlZDFhOTljYzY1NzA5ZjM0YTRcIiIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkiLCJ2YXIgY3VycmVudE1vZHVsZURhdGEgPSB7fTtcbnZhciBpbnN0YWxsZWRNb2R1bGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jO1xuXG4vLyBtb2R1bGUgYW5kIHJlcXVpcmUgY3JlYXRpb25cbnZhciBjdXJyZW50Q2hpbGRNb2R1bGU7XG52YXIgY3VycmVudFBhcmVudHMgPSBbXTtcblxuLy8gc3RhdHVzXG52YXIgcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzID0gW107XG52YXIgY3VycmVudFN0YXR1cyA9IFwiaWRsZVwiO1xuXG4vLyB3aGlsZSBkb3dubG9hZGluZ1xudmFyIGJsb2NraW5nUHJvbWlzZXM7XG5cbi8vIFRoZSB1cGRhdGUgaW5mb1xudmFyIGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzO1xudmFyIHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckQgPSBjdXJyZW50TW9kdWxlRGF0YTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5pLnB1c2goZnVuY3Rpb24gKG9wdGlvbnMpIHtcblx0dmFyIG1vZHVsZSA9IG9wdGlvbnMubW9kdWxlO1xuXHR2YXIgcmVxdWlyZSA9IGNyZWF0ZVJlcXVpcmUob3B0aW9ucy5yZXF1aXJlLCBvcHRpb25zLmlkKTtcblx0bW9kdWxlLmhvdCA9IGNyZWF0ZU1vZHVsZUhvdE9iamVjdChvcHRpb25zLmlkLCBtb2R1bGUpO1xuXHRtb2R1bGUucGFyZW50cyA9IGN1cnJlbnRQYXJlbnRzO1xuXHRtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0Y3VycmVudFBhcmVudHMgPSBbXTtcblx0b3B0aW9ucy5yZXF1aXJlID0gcmVxdWlyZTtcbn0pO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckMgPSB7fTtcbl9fd2VicGFja19yZXF1aXJlX18uaG1ySSA9IHt9O1xuXG5mdW5jdGlvbiBjcmVhdGVSZXF1aXJlKHJlcXVpcmUsIG1vZHVsZUlkKSB7XG5cdHZhciBtZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuXHRpZiAoIW1lKSByZXR1cm4gcmVxdWlyZTtcblx0dmFyIGZuID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcblx0XHRpZiAobWUuaG90LmFjdGl2ZSkge1xuXHRcdFx0aWYgKGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0pIHtcblx0XHRcdFx0dmFyIHBhcmVudHMgPSBpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdLnBhcmVudHM7XG5cdFx0XHRcdGlmIChwYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpID09PSAtMSkge1xuXHRcdFx0XHRcdHBhcmVudHMucHVzaChtb2R1bGVJZCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGN1cnJlbnRQYXJlbnRzID0gW21vZHVsZUlkXTtcblx0XHRcdFx0Y3VycmVudENoaWxkTW9kdWxlID0gcmVxdWVzdDtcblx0XHRcdH1cblx0XHRcdGlmIChtZS5jaGlsZHJlbi5pbmRleE9mKHJlcXVlc3QpID09PSAtMSkge1xuXHRcdFx0XHRtZS5jaGlsZHJlbi5wdXNoKHJlcXVlc3QpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXG5cdFx0XHRcdFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICtcblx0XHRcdFx0XHRyZXF1ZXN0ICtcblx0XHRcdFx0XHRcIikgZnJvbSBkaXNwb3NlZCBtb2R1bGUgXCIgK1xuXHRcdFx0XHRcdG1vZHVsZUlkXG5cdFx0XHQpO1xuXHRcdFx0Y3VycmVudFBhcmVudHMgPSBbXTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlcXVpcmUocmVxdWVzdCk7XG5cdH07XG5cdHZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiAobmFtZSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHJldHVybiByZXF1aXJlW25hbWVdO1xuXHRcdFx0fSxcblx0XHRcdHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0XHRcdHJlcXVpcmVbbmFtZV0gPSB2YWx1ZTtcblx0XHRcdH1cblx0XHR9O1xuXHR9O1xuXHRmb3IgKHZhciBuYW1lIGluIHJlcXVpcmUpIHtcblx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlcXVpcmUsIG5hbWUpICYmIG5hbWUgIT09IFwiZVwiKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sIG5hbWUsIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcihuYW1lKSk7XG5cdFx0fVxuXHR9XG5cdGZuLmUgPSBmdW5jdGlvbiAoY2h1bmtJZCkge1xuXHRcdHJldHVybiB0cmFja0Jsb2NraW5nUHJvbWlzZShyZXF1aXJlLmUoY2h1bmtJZCkpO1xuXHR9O1xuXHRyZXR1cm4gZm47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU1vZHVsZUhvdE9iamVjdChtb2R1bGVJZCwgbWUpIHtcblx0dmFyIGhvdCA9IHtcblx0XHQvLyBwcml2YXRlIHN0dWZmXG5cdFx0X2FjY2VwdGVkRGVwZW5kZW5jaWVzOiB7fSxcblx0XHRfZGVjbGluZWREZXBlbmRlbmNpZXM6IHt9LFxuXHRcdF9zZWxmQWNjZXB0ZWQ6IGZhbHNlLFxuXHRcdF9zZWxmRGVjbGluZWQ6IGZhbHNlLFxuXHRcdF9zZWxmSW52YWxpZGF0ZWQ6IGZhbHNlLFxuXHRcdF9kaXNwb3NlSGFuZGxlcnM6IFtdLFxuXHRcdF9tYWluOiBjdXJyZW50Q2hpbGRNb2R1bGUgIT09IG1vZHVsZUlkLFxuXHRcdF9yZXF1aXJlU2VsZjogZnVuY3Rpb24gKCkge1xuXHRcdFx0Y3VycmVudFBhcmVudHMgPSBtZS5wYXJlbnRzLnNsaWNlKCk7XG5cdFx0XHRjdXJyZW50Q2hpbGRNb2R1bGUgPSBtb2R1bGVJZDtcblx0XHRcdF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpO1xuXHRcdH0sXG5cblx0XHQvLyBNb2R1bGUgQVBJXG5cdFx0YWN0aXZlOiB0cnVlLFxuXHRcdGFjY2VwdDogZnVuY3Rpb24gKGRlcCwgY2FsbGJhY2spIHtcblx0XHRcdGlmIChkZXAgPT09IHVuZGVmaW5lZCkgaG90Ll9zZWxmQWNjZXB0ZWQgPSB0cnVlO1xuXHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJmdW5jdGlvblwiKSBob3QuX3NlbGZBY2NlcHRlZCA9IGRlcDtcblx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIgJiYgZGVwICE9PSBudWxsKVxuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKylcblx0XHRcdFx0XHRob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSBjYWxsYmFjayB8fCBmdW5jdGlvbiAoKSB7fTtcblx0XHRcdGVsc2UgaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBdID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24gKCkge307XG5cdFx0fSxcblx0XHRkZWNsaW5lOiBmdW5jdGlvbiAoZGVwKSB7XG5cdFx0XHRpZiAoZGVwID09PSB1bmRlZmluZWQpIGhvdC5fc2VsZkRlY2xpbmVkID0gdHJ1ZTtcblx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIgJiYgZGVwICE9PSBudWxsKVxuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKylcblx0XHRcdFx0XHRob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSB0cnVlO1xuXHRcdFx0ZWxzZSBob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcF0gPSB0cnVlO1xuXHRcdH0sXG5cdFx0ZGlzcG9zZTogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcblx0XHR9LFxuXHRcdGFkZERpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcblx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xuXHRcdH0sXG5cdFx0cmVtb3ZlRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXHRcdFx0dmFyIGlkeCA9IGhvdC5fZGlzcG9zZUhhbmRsZXJzLmluZGV4T2YoY2FsbGJhY2spO1xuXHRcdFx0aWYgKGlkeCA+PSAwKSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcblx0XHR9LFxuXHRcdGludmFsaWRhdGU6IGZ1bmN0aW9uICgpIHtcblx0XHRcdHRoaXMuX3NlbGZJbnZhbGlkYXRlZCA9IHRydWU7XG5cdFx0XHRzd2l0Y2ggKGN1cnJlbnRTdGF0dXMpIHtcblx0XHRcdFx0Y2FzZSBcImlkbGVcIjpcblx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uaG1ySSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtcklba2V5XShcblx0XHRcdFx0XHRcdFx0bW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHNldFN0YXR1cyhcInJlYWR5XCIpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwicmVhZHlcIjpcblx0XHRcdFx0XHRPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJJW2tleV0oXG5cdFx0XHRcdFx0XHRcdG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVyc1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcInByZXBhcmVcIjpcblx0XHRcdFx0Y2FzZSBcImNoZWNrXCI6XG5cdFx0XHRcdGNhc2UgXCJkaXNwb3NlXCI6XG5cdFx0XHRcdGNhc2UgXCJhcHBseVwiOlxuXHRcdFx0XHRcdChxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMgPSBxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMgfHwgW10pLnB1c2goXG5cdFx0XHRcdFx0XHRtb2R1bGVJZFxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0Ly8gaWdub3JlIHJlcXVlc3RzIGluIGVycm9yIHN0YXRlc1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBNYW5hZ2VtZW50IEFQSVxuXHRcdGNoZWNrOiBob3RDaGVjayxcblx0XHRhcHBseTogaG90QXBwbHksXG5cdFx0c3RhdHVzOiBmdW5jdGlvbiAobCkge1xuXHRcdFx0aWYgKCFsKSByZXR1cm4gY3VycmVudFN0YXR1cztcblx0XHRcdHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuXHRcdH0sXG5cdFx0YWRkU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24gKGwpIHtcblx0XHRcdHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuXHRcdH0sXG5cdFx0cmVtb3ZlU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24gKGwpIHtcblx0XHRcdHZhciBpZHggPSByZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMuaW5kZXhPZihsKTtcblx0XHRcdGlmIChpZHggPj0gMCkgcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuXHRcdH0sXG5cblx0XHQvL2luaGVyaXQgZnJvbSBwcmV2aW91cyBkaXNwb3NlIGNhbGxcblx0XHRkYXRhOiBjdXJyZW50TW9kdWxlRGF0YVttb2R1bGVJZF1cblx0fTtcblx0Y3VycmVudENoaWxkTW9kdWxlID0gdW5kZWZpbmVkO1xuXHRyZXR1cm4gaG90O1xufVxuXG5mdW5jdGlvbiBzZXRTdGF0dXMobmV3U3RhdHVzKSB7XG5cdGN1cnJlbnRTdGF0dXMgPSBuZXdTdGF0dXM7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLmxlbmd0aDsgaSsrKVxuXHRcdHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVyc1tpXS5jYWxsKG51bGwsIG5ld1N0YXR1cyk7XG59XG5cbmZ1bmN0aW9uIHRyYWNrQmxvY2tpbmdQcm9taXNlKHByb21pc2UpIHtcblx0c3dpdGNoIChjdXJyZW50U3RhdHVzKSB7XG5cdFx0Y2FzZSBcInJlYWR5XCI6XG5cdFx0XHRzZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xuXHRcdFx0YmxvY2tpbmdQcm9taXNlcy5wdXNoKHByb21pc2UpO1xuXHRcdFx0d2FpdEZvckJsb2NraW5nUHJvbWlzZXMoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRzZXRTdGF0dXMoXCJyZWFkeVwiKTtcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIHByb21pc2U7XG5cdFx0Y2FzZSBcInByZXBhcmVcIjpcblx0XHRcdGJsb2NraW5nUHJvbWlzZXMucHVzaChwcm9taXNlKTtcblx0XHRcdHJldHVybiBwcm9taXNlO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gcHJvbWlzZTtcblx0fVxufVxuXG5mdW5jdGlvbiB3YWl0Rm9yQmxvY2tpbmdQcm9taXNlcyhmbikge1xuXHRpZiAoYmxvY2tpbmdQcm9taXNlcy5sZW5ndGggPT09IDApIHJldHVybiBmbigpO1xuXHR2YXIgYmxvY2tlciA9IGJsb2NraW5nUHJvbWlzZXM7XG5cdGJsb2NraW5nUHJvbWlzZXMgPSBbXTtcblx0cmV0dXJuIFByb21pc2UuYWxsKGJsb2NrZXIpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB3YWl0Rm9yQmxvY2tpbmdQcm9taXNlcyhmbik7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBob3RDaGVjayhhcHBseU9uVXBkYXRlKSB7XG5cdGlmIChjdXJyZW50U3RhdHVzICE9PSBcImlkbGVcIikge1xuXHRcdHRocm93IG5ldyBFcnJvcihcImNoZWNrKCkgaXMgb25seSBhbGxvd2VkIGluIGlkbGUgc3RhdHVzXCIpO1xuXHR9XG5cdHNldFN0YXR1cyhcImNoZWNrXCIpO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5obXJNKCkudGhlbihmdW5jdGlvbiAodXBkYXRlKSB7XG5cdFx0aWYgKCF1cGRhdGUpIHtcblx0XHRcdHNldFN0YXR1cyhhcHBseUludmFsaWRhdGVkTW9kdWxlcygpID8gXCJyZWFkeVwiIDogXCJpZGxlXCIpO1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXG5cdFx0c2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcblxuXHRcdHZhciB1cGRhdGVkTW9kdWxlcyA9IFtdO1xuXHRcdGJsb2NraW5nUHJvbWlzZXMgPSBbXTtcblx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyA9IFtdO1xuXG5cdFx0cmV0dXJuIFByb21pc2UuYWxsKFxuXHRcdFx0T2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5obXJDKS5yZWR1Y2UoZnVuY3Rpb24gKFxuXHRcdFx0XHRwcm9taXNlcyxcblx0XHRcdFx0a2V5XG5cdFx0XHQpIHtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJDW2tleV0oXG5cdFx0XHRcdFx0dXBkYXRlLmMsXG5cdFx0XHRcdFx0dXBkYXRlLnIsXG5cdFx0XHRcdFx0dXBkYXRlLm0sXG5cdFx0XHRcdFx0cHJvbWlzZXMsXG5cdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMsXG5cdFx0XHRcdFx0dXBkYXRlZE1vZHVsZXNcblx0XHRcdFx0KTtcblx0XHRcdFx0cmV0dXJuIHByb21pc2VzO1xuXHRcdFx0fSxcblx0XHRcdFtdKVxuXHRcdCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gd2FpdEZvckJsb2NraW5nUHJvbWlzZXMoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRpZiAoYXBwbHlPblVwZGF0ZSkge1xuXHRcdFx0XHRcdHJldHVybiBpbnRlcm5hbEFwcGx5KGFwcGx5T25VcGRhdGUpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHNldFN0YXR1cyhcInJlYWR5XCIpO1xuXG5cdFx0XHRcdFx0cmV0dXJuIHVwZGF0ZWRNb2R1bGVzO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGhvdEFwcGx5KG9wdGlvbnMpIHtcblx0aWYgKGN1cnJlbnRTdGF0dXMgIT09IFwicmVhZHlcIikge1xuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcImFwcGx5KCkgaXMgb25seSBhbGxvd2VkIGluIHJlYWR5IHN0YXR1c1wiKTtcblx0XHR9KTtcblx0fVxuXHRyZXR1cm4gaW50ZXJuYWxBcHBseShvcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gaW50ZXJuYWxBcHBseShvcHRpb25zKSB7XG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdGFwcGx5SW52YWxpZGF0ZWRNb2R1bGVzKCk7XG5cblx0dmFyIHJlc3VsdHMgPSBjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycy5tYXAoZnVuY3Rpb24gKGhhbmRsZXIpIHtcblx0XHRyZXR1cm4gaGFuZGxlcihvcHRpb25zKTtcblx0fSk7XG5cdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzID0gdW5kZWZpbmVkO1xuXG5cdHZhciBlcnJvcnMgPSByZXN1bHRzXG5cdFx0Lm1hcChmdW5jdGlvbiAocikge1xuXHRcdFx0cmV0dXJuIHIuZXJyb3I7XG5cdFx0fSlcblx0XHQuZmlsdGVyKEJvb2xlYW4pO1xuXG5cdGlmIChlcnJvcnMubGVuZ3RoID4gMCkge1xuXHRcdHNldFN0YXR1cyhcImFib3J0XCIpO1xuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdHRocm93IGVycm9yc1swXTtcblx0XHR9KTtcblx0fVxuXG5cdC8vIE5vdyBpbiBcImRpc3Bvc2VcIiBwaGFzZVxuXHRzZXRTdGF0dXMoXCJkaXNwb3NlXCIpO1xuXG5cdHJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbiAocmVzdWx0KSB7XG5cdFx0aWYgKHJlc3VsdC5kaXNwb3NlKSByZXN1bHQuZGlzcG9zZSgpO1xuXHR9KTtcblxuXHQvLyBOb3cgaW4gXCJhcHBseVwiIHBoYXNlXG5cdHNldFN0YXR1cyhcImFwcGx5XCIpO1xuXG5cdHZhciBlcnJvcjtcblx0dmFyIHJlcG9ydEVycm9yID0gZnVuY3Rpb24gKGVycikge1xuXHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuXHR9O1xuXG5cdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcblx0cmVzdWx0cy5mb3JFYWNoKGZ1bmN0aW9uIChyZXN1bHQpIHtcblx0XHRpZiAocmVzdWx0LmFwcGx5KSB7XG5cdFx0XHR2YXIgbW9kdWxlcyA9IHJlc3VsdC5hcHBseShyZXBvcnRFcnJvcik7XG5cdFx0XHRpZiAobW9kdWxlcykge1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaChtb2R1bGVzW2ldKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblx0Ly8gaGFuZGxlIGVycm9ycyBpbiBhY2NlcHQgaGFuZGxlcnMgYW5kIHNlbGYgYWNjZXB0ZWQgbW9kdWxlIGxvYWRcblx0aWYgKGVycm9yKSB7XG5cdFx0c2V0U3RhdHVzKFwiZmFpbFwiKTtcblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aHJvdyBlcnJvcjtcblx0XHR9KTtcblx0fVxuXG5cdGlmIChxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMpIHtcblx0XHRyZXR1cm4gaW50ZXJuYWxBcHBseShvcHRpb25zKS50aGVuKGZ1bmN0aW9uIChsaXN0KSB7XG5cdFx0XHRvdXRkYXRlZE1vZHVsZXMuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlSWQpIHtcblx0XHRcdFx0aWYgKGxpc3QuaW5kZXhPZihtb2R1bGVJZCkgPCAwKSBsaXN0LnB1c2gobW9kdWxlSWQpO1xuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gbGlzdDtcblx0XHR9KTtcblx0fVxuXG5cdHNldFN0YXR1cyhcImlkbGVcIik7XG5cdHJldHVybiBQcm9taXNlLnJlc29sdmUob3V0ZGF0ZWRNb2R1bGVzKTtcbn1cblxuZnVuY3Rpb24gYXBwbHlJbnZhbGlkYXRlZE1vZHVsZXMoKSB7XG5cdGlmIChxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMpIHtcblx0XHRpZiAoIWN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzKSBjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyA9IFtdO1xuXHRcdE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uaG1ySSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlSWQpIHtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJJW2tleV0oXG5cdFx0XHRcdFx0bW9kdWxlSWQsXG5cdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnNcblx0XHRcdFx0KTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHRcdHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcyA9IHVuZGVmaW5lZDtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxufSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiLy8gbm8gYmFzZVVSSVxuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBQcm9taXNlID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0MTc5OiAwXG59O1xuXG5cbi8vIG5vIGNodW5rIG9uIGRlbWFuZCBsb2FkaW5nXG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG52YXIgY3VycmVudFVwZGF0ZWRNb2R1bGVzTGlzdDtcbnZhciB3YWl0aW5nVXBkYXRlUmVzb2x2ZXMgPSB7fTtcbmZ1bmN0aW9uIGxvYWRVcGRhdGVDaHVuayhjaHVua0lkKSB7XG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0d2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdID0gcmVzb2x2ZTtcblx0XHQvLyBzdGFydCB1cGRhdGUgY2h1bmsgbG9hZGluZ1xuXHRcdHZhciB1cmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLmh1KGNodW5rSWQpO1xuXHRcdC8vIGNyZWF0ZSBlcnJvciBiZWZvcmUgc3RhY2sgdW53b3VuZCB0byBnZXQgdXNlZnVsIHN0YWNrdHJhY2UgbGF0ZXJcblx0XHR2YXIgZXJyb3IgPSBuZXcgRXJyb3IoKTtcblx0XHR2YXIgbG9hZGluZ0VuZGVkID0gKGV2ZW50KSA9PiB7XG5cdFx0XHRpZih3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0pIHtcblx0XHRcdFx0d2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdID0gdW5kZWZpbmVkXG5cdFx0XHRcdHZhciBlcnJvclR5cGUgPSBldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnID8gJ21pc3NpbmcnIDogZXZlbnQudHlwZSk7XG5cdFx0XHRcdHZhciByZWFsU3JjID0gZXZlbnQgJiYgZXZlbnQudGFyZ2V0ICYmIGV2ZW50LnRhcmdldC5zcmM7XG5cdFx0XHRcdGVycm9yLm1lc3NhZ2UgPSAnTG9hZGluZyBob3QgdXBkYXRlIGNodW5rICcgKyBjaHVua0lkICsgJyBmYWlsZWQuXFxuKCcgKyBlcnJvclR5cGUgKyAnOiAnICsgcmVhbFNyYyArICcpJztcblx0XHRcdFx0ZXJyb3IubmFtZSA9ICdDaHVua0xvYWRFcnJvcic7XG5cdFx0XHRcdGVycm9yLnR5cGUgPSBlcnJvclR5cGU7XG5cdFx0XHRcdGVycm9yLnJlcXVlc3QgPSByZWFsU3JjO1xuXHRcdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdFx0fVxuXHRcdH07XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5sKHVybCwgbG9hZGluZ0VuZGVkKTtcblx0fSk7XG59XG5cbnNlbGZbXCJ3ZWJwYWNrSG90VXBkYXRlaHR0cGZyb250XCJdID0gKGNodW5rSWQsIG1vcmVNb2R1bGVzLCBydW50aW1lKSA9PiB7XG5cdGZvcih2YXIgbW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8obW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuXHRcdFx0Y3VycmVudFVwZGF0ZVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG5cdFx0XHRpZihjdXJyZW50VXBkYXRlZE1vZHVsZXNMaXN0KSBjdXJyZW50VXBkYXRlZE1vZHVsZXNMaXN0LnB1c2gobW9kdWxlSWQpO1xuXHRcdH1cblx0fVxuXHRpZihydW50aW1lKSBjdXJyZW50VXBkYXRlUnVudGltZS5wdXNoKHJ1bnRpbWUpO1xuXHRpZih3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0pIHtcblx0XHR3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0oKTtcblx0XHR3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0gPSB1bmRlZmluZWQ7XG5cdH1cbn07XG5cbnZhciBjdXJyZW50VXBkYXRlQ2h1bmtzO1xudmFyIGN1cnJlbnRVcGRhdGU7XG52YXIgY3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3M7XG52YXIgY3VycmVudFVwZGF0ZVJ1bnRpbWU7XG5mdW5jdGlvbiBhcHBseUhhbmRsZXIob3B0aW9ucykge1xuXHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5mKSBkZWxldGUgX193ZWJwYWNrX3JlcXVpcmVfXy5mLmpzb25wSG1yO1xuXHRjdXJyZW50VXBkYXRlQ2h1bmtzID0gdW5kZWZpbmVkO1xuXHRmdW5jdGlvbiBnZXRBZmZlY3RlZE1vZHVsZUVmZmVjdHModXBkYXRlTW9kdWxlSWQpIHtcblx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW3VwZGF0ZU1vZHVsZUlkXTtcblx0XHR2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTtcblxuXHRcdHZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5tYXAoZnVuY3Rpb24gKGlkKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRjaGFpbjogW2lkXSxcblx0XHRcdFx0aWQ6IGlkXG5cdFx0XHR9O1xuXHRcdH0pO1xuXHRcdHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG5cdFx0XHR2YXIgcXVldWVJdGVtID0gcXVldWUucG9wKCk7XG5cdFx0XHR2YXIgbW9kdWxlSWQgPSBxdWV1ZUl0ZW0uaWQ7XG5cdFx0XHR2YXIgY2hhaW4gPSBxdWV1ZUl0ZW0uY2hhaW47XG5cdFx0XHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZUlkXTtcblx0XHRcdGlmIChcblx0XHRcdFx0IW1vZHVsZSB8fFxuXHRcdFx0XHQobW9kdWxlLmhvdC5fc2VsZkFjY2VwdGVkICYmICFtb2R1bGUuaG90Ll9zZWxmSW52YWxpZGF0ZWQpXG5cdFx0XHQpXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0aWYgKG1vZHVsZS5ob3QuX3NlbGZEZWNsaW5lZCkge1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdHR5cGU6IFwic2VsZi1kZWNsaW5lZFwiLFxuXHRcdFx0XHRcdGNoYWluOiBjaGFpbixcblx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdGlmIChtb2R1bGUuaG90Ll9tYWluKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0dHlwZTogXCJ1bmFjY2VwdGVkXCIsXG5cdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuXHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtb2R1bGUucGFyZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHR2YXIgcGFyZW50SWQgPSBtb2R1bGUucGFyZW50c1tpXTtcblx0XHRcdFx0dmFyIHBhcmVudCA9IF9fd2VicGFja19yZXF1aXJlX18uY1twYXJlbnRJZF07XG5cdFx0XHRcdGlmICghcGFyZW50KSBjb250aW51ZTtcblx0XHRcdFx0aWYgKHBhcmVudC5ob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xuXHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHR0eXBlOiBcImRlY2xpbmVkXCIsXG5cdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLFxuXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0cGFyZW50SWQ6IHBhcmVudElkXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAob3V0ZGF0ZWRNb2R1bGVzLmluZGV4T2YocGFyZW50SWQpICE9PSAtMSkgY29udGludWU7XG5cdFx0XHRcdGlmIChwYXJlbnQuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcblx0XHRcdFx0XHRpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSlcblx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSA9IFtdO1xuXHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSwgW21vZHVsZUlkXSk7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXTtcblx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2gocGFyZW50SWQpO1xuXHRcdFx0XHRxdWV1ZS5wdXNoKHtcblx0XHRcdFx0XHRjaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLFxuXHRcdFx0XHRcdGlkOiBwYXJlbnRJZFxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dHlwZTogXCJhY2NlcHRlZFwiLFxuXHRcdFx0bW9kdWxlSWQ6IHVwZGF0ZU1vZHVsZUlkLFxuXHRcdFx0b3V0ZGF0ZWRNb2R1bGVzOiBvdXRkYXRlZE1vZHVsZXMsXG5cdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llczogb3V0ZGF0ZWREZXBlbmRlbmNpZXNcblx0XHR9O1xuXHR9XG5cblx0ZnVuY3Rpb24gYWRkQWxsVG9TZXQoYSwgYikge1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBiW2ldO1xuXHRcdFx0aWYgKGEuaW5kZXhPZihpdGVtKSA9PT0gLTEpIGEucHVzaChpdGVtKTtcblx0XHR9XG5cdH1cblxuXHQvLyBhdCBiZWdpbiBhbGwgdXBkYXRlcyBtb2R1bGVzIGFyZSBvdXRkYXRlZFxuXHQvLyB0aGUgXCJvdXRkYXRlZFwiIHN0YXR1cyBjYW4gcHJvcGFnYXRlIHRvIHBhcmVudHMgaWYgdGhleSBkb24ndCBhY2NlcHQgdGhlIGNoaWxkcmVuXG5cdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuXHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XG5cdHZhciBhcHBsaWVkVXBkYXRlID0ge307XG5cblx0dmFyIHdhcm5VbmV4cGVjdGVkUmVxdWlyZSA9IGZ1bmN0aW9uIHdhcm5VbmV4cGVjdGVkUmVxdWlyZShtb2R1bGUpIHtcblx0XHRjb25zb2xlLndhcm4oXG5cdFx0XHRcIltITVJdIHVuZXhwZWN0ZWQgcmVxdWlyZShcIiArIG1vZHVsZS5pZCArIFwiKSB0byBkaXNwb3NlZCBtb2R1bGVcIlxuXHRcdCk7XG5cdH07XG5cblx0Zm9yICh2YXIgbW9kdWxlSWQgaW4gY3VycmVudFVwZGF0ZSkge1xuXHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8oY3VycmVudFVwZGF0ZSwgbW9kdWxlSWQpKSB7XG5cdFx0XHR2YXIgbmV3TW9kdWxlRmFjdG9yeSA9IGN1cnJlbnRVcGRhdGVbbW9kdWxlSWRdO1xuXHRcdFx0LyoqIEB0eXBlIHtUT0RPfSAqL1xuXHRcdFx0dmFyIHJlc3VsdDtcblx0XHRcdGlmIChuZXdNb2R1bGVGYWN0b3J5KSB7XG5cdFx0XHRcdHJlc3VsdCA9IGdldEFmZmVjdGVkTW9kdWxlRWZmZWN0cyhtb2R1bGVJZCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXN1bHQgPSB7XG5cdFx0XHRcdFx0dHlwZTogXCJkaXNwb3NlZFwiLFxuXHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0LyoqIEB0eXBlIHtFcnJvcnxmYWxzZX0gKi9cblx0XHRcdHZhciBhYm9ydEVycm9yID0gZmFsc2U7XG5cdFx0XHR2YXIgZG9BcHBseSA9IGZhbHNlO1xuXHRcdFx0dmFyIGRvRGlzcG9zZSA9IGZhbHNlO1xuXHRcdFx0dmFyIGNoYWluSW5mbyA9IFwiXCI7XG5cdFx0XHRpZiAocmVzdWx0LmNoYWluKSB7XG5cdFx0XHRcdGNoYWluSW5mbyA9IFwiXFxuVXBkYXRlIHByb3BhZ2F0aW9uOiBcIiArIHJlc3VsdC5jaGFpbi5qb2luKFwiIC0+IFwiKTtcblx0XHRcdH1cblx0XHRcdHN3aXRjaCAocmVzdWx0LnR5cGUpIHtcblx0XHRcdFx0Y2FzZSBcInNlbGYtZGVjbGluZWRcIjpcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcblx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXG5cdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuXHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBvZiBzZWxmIGRlY2xpbmU6IFwiICtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHQubW9kdWxlSWQgK1xuXHRcdFx0XHRcdFx0XHRcdGNoYWluSW5mb1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImRlY2xpbmVkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EZWNsaW5lZCkgb3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XG5cdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxuXHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcblx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2Ugb2YgZGVjbGluZWQgZGVwZW5kZW5jeTogXCIgK1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5tb2R1bGVJZCArXG5cdFx0XHRcdFx0XHRcdFx0XCIgaW4gXCIgK1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5wYXJlbnRJZCArXG5cdFx0XHRcdFx0XHRcdFx0Y2hhaW5JbmZvXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwidW5hY2NlcHRlZFwiOlxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uVW5hY2NlcHRlZCkgb3B0aW9ucy5vblVuYWNjZXB0ZWQocmVzdWx0KTtcblx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlVW5hY2NlcHRlZClcblx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG5cdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIFwiICsgbW9kdWxlSWQgKyBcIiBpcyBub3QgYWNjZXB0ZWRcIiArIGNoYWluSW5mb1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImFjY2VwdGVkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25BY2NlcHRlZCkgb3B0aW9ucy5vbkFjY2VwdGVkKHJlc3VsdCk7XG5cdFx0XHRcdFx0ZG9BcHBseSA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJkaXNwb3NlZFwiOlxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGlzcG9zZWQpIG9wdGlvbnMub25EaXNwb3NlZChyZXN1bHQpO1xuXHRcdFx0XHRcdGRvRGlzcG9zZSA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiVW5leGNlcHRpb24gdHlwZSBcIiArIHJlc3VsdC50eXBlKTtcblx0XHRcdH1cblx0XHRcdGlmIChhYm9ydEVycm9yKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0ZXJyb3I6IGFib3J0RXJyb3Jcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdGlmIChkb0FwcGx5KSB7XG5cdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdID0gbmV3TW9kdWxlRmFjdG9yeTtcblx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCByZXN1bHQub3V0ZGF0ZWRNb2R1bGVzKTtcblx0XHRcdFx0Zm9yIChtb2R1bGVJZCBpbiByZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcblx0XHRcdFx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRcdFx0XHRpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSlcblx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdID0gW107XG5cdFx0XHRcdFx0XHRhZGRBbGxUb1NldChcblx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdLFxuXHRcdFx0XHRcdFx0XHRyZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKGRvRGlzcG9zZSkge1xuXHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIFtyZXN1bHQubW9kdWxlSWRdKTtcblx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSB3YXJuVW5leHBlY3RlZFJlcXVpcmU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdGN1cnJlbnRVcGRhdGUgPSB1bmRlZmluZWQ7XG5cblx0Ly8gU3RvcmUgc2VsZiBhY2NlcHRlZCBvdXRkYXRlZCBtb2R1bGVzIHRvIHJlcXVpcmUgdGhlbSBsYXRlciBieSB0aGUgbW9kdWxlIHN5c3RlbVxuXHR2YXIgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzID0gW107XG5cdGZvciAodmFyIGogPSAwOyBqIDwgb3V0ZGF0ZWRNb2R1bGVzLmxlbmd0aDsgaisrKSB7XG5cdFx0dmFyIG91dGRhdGVkTW9kdWxlSWQgPSBvdXRkYXRlZE1vZHVsZXNbal07XG5cdFx0aWYgKFxuXHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jW291dGRhdGVkTW9kdWxlSWRdICYmXG5cdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmNbb3V0ZGF0ZWRNb2R1bGVJZF0uaG90Ll9zZWxmQWNjZXB0ZWQgJiZcblx0XHRcdC8vIHJlbW92ZWQgc2VsZi1hY2NlcHRlZCBtb2R1bGVzIHNob3VsZCBub3QgYmUgcmVxdWlyZWRcblx0XHRcdGFwcGxpZWRVcGRhdGVbb3V0ZGF0ZWRNb2R1bGVJZF0gIT09IHdhcm5VbmV4cGVjdGVkUmVxdWlyZSAmJlxuXHRcdFx0Ly8gd2hlbiBjYWxsZWQgaW52YWxpZGF0ZSBzZWxmLWFjY2VwdGluZyBpcyBub3QgcG9zc2libGVcblx0XHRcdCFfX3dlYnBhY2tfcmVxdWlyZV9fLmNbb3V0ZGF0ZWRNb2R1bGVJZF0uaG90Ll9zZWxmSW52YWxpZGF0ZWRcblx0XHQpIHtcblx0XHRcdG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5wdXNoKHtcblx0XHRcdFx0bW9kdWxlOiBvdXRkYXRlZE1vZHVsZUlkLFxuXHRcdFx0XHRyZXF1aXJlOiBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbb3V0ZGF0ZWRNb2R1bGVJZF0uaG90Ll9yZXF1aXJlU2VsZixcblx0XHRcdFx0ZXJyb3JIYW5kbGVyOiBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbb3V0ZGF0ZWRNb2R1bGVJZF0uaG90Ll9zZWxmQWNjZXB0ZWRcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdHZhciBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcztcblxuXHRyZXR1cm4ge1xuXHRcdGRpc3Bvc2U6IGZ1bmN0aW9uICgpIHtcblx0XHRcdGN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzLmZvckVhY2goZnVuY3Rpb24gKGNodW5rSWQpIHtcblx0XHRcdFx0ZGVsZXRlIGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcblx0XHRcdH0pO1xuXHRcdFx0Y3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MgPSB1bmRlZmluZWQ7XG5cblx0XHRcdHZhciBpZHg7XG5cdFx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMuc2xpY2UoKTtcblx0XHRcdHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdHZhciBtb2R1bGVJZCA9IHF1ZXVlLnBvcCgpO1xuXHRcdFx0XHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZUlkXTtcblx0XHRcdFx0aWYgKCFtb2R1bGUpIGNvbnRpbnVlO1xuXG5cdFx0XHRcdHZhciBkYXRhID0ge307XG5cblx0XHRcdFx0Ly8gQ2FsbCBkaXNwb3NlIGhhbmRsZXJzXG5cdFx0XHRcdHZhciBkaXNwb3NlSGFuZGxlcnMgPSBtb2R1bGUuaG90Ll9kaXNwb3NlSGFuZGxlcnM7XG5cdFx0XHRcdGZvciAoaiA9IDA7IGogPCBkaXNwb3NlSGFuZGxlcnMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHRkaXNwb3NlSGFuZGxlcnNbal0uY2FsbChudWxsLCBkYXRhKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckRbbW9kdWxlSWRdID0gZGF0YTtcblxuXHRcdFx0XHQvLyBkaXNhYmxlIG1vZHVsZSAodGhpcyBkaXNhYmxlcyByZXF1aXJlcyBmcm9tIHRoaXMgbW9kdWxlKVxuXHRcdFx0XHRtb2R1bGUuaG90LmFjdGl2ZSA9IGZhbHNlO1xuXG5cdFx0XHRcdC8vIHJlbW92ZSBtb2R1bGUgZnJvbSBjYWNoZVxuXHRcdFx0XHRkZWxldGUgX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZUlkXTtcblxuXHRcdFx0XHQvLyB3aGVuIGRpc3Bvc2luZyB0aGVyZSBpcyBubyBuZWVkIHRvIGNhbGwgZGlzcG9zZSBoYW5kbGVyXG5cdFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG5cblx0XHRcdFx0Ly8gcmVtb3ZlIFwicGFyZW50c1wiIHJlZmVyZW5jZXMgZnJvbSBhbGwgY2hpbGRyZW5cblx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IG1vZHVsZS5jaGlsZHJlbi5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdHZhciBjaGlsZCA9IF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGUuY2hpbGRyZW5bal1dO1xuXHRcdFx0XHRcdGlmICghY2hpbGQpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdGlkeCA9IGNoaWxkLnBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCk7XG5cdFx0XHRcdFx0aWYgKGlkeCA+PSAwKSB7XG5cdFx0XHRcdFx0XHRjaGlsZC5wYXJlbnRzLnNwbGljZShpZHgsIDEpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyByZW1vdmUgb3V0ZGF0ZWQgZGVwZW5kZW5jeSBmcm9tIG1vZHVsZSBjaGlsZHJlblxuXHRcdFx0dmFyIGRlcGVuZGVuY3k7XG5cdFx0XHRmb3IgKHZhciBvdXRkYXRlZE1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG5cdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8ob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG91dGRhdGVkTW9kdWxlSWQpKSB7XG5cdFx0XHRcdFx0bW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdFx0XHRcdGlmIChtb2R1bGUpIHtcblx0XHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID1cblx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbb3V0ZGF0ZWRNb2R1bGVJZF07XG5cdFx0XHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2pdO1xuXHRcdFx0XHRcdFx0XHRpZHggPSBtb2R1bGUuY2hpbGRyZW4uaW5kZXhPZihkZXBlbmRlbmN5KTtcblx0XHRcdFx0XHRcdFx0aWYgKGlkeCA+PSAwKSBtb2R1bGUuY2hpbGRyZW4uc3BsaWNlKGlkeCwgMSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRhcHBseTogZnVuY3Rpb24gKHJlcG9ydEVycm9yKSB7XG5cdFx0XHQvLyBpbnNlcnQgbmV3IGNvZGVcblx0XHRcdGZvciAodmFyIHVwZGF0ZU1vZHVsZUlkIGluIGFwcGxpZWRVcGRhdGUpIHtcblx0XHRcdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhhcHBsaWVkVXBkYXRlLCB1cGRhdGVNb2R1bGVJZCkpIHtcblx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm1bdXBkYXRlTW9kdWxlSWRdID0gYXBwbGllZFVwZGF0ZVt1cGRhdGVNb2R1bGVJZF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gcnVuIG5ldyBydW50aW1lIG1vZHVsZXNcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgY3VycmVudFVwZGF0ZVJ1bnRpbWUubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0Y3VycmVudFVwZGF0ZVJ1bnRpbWVbaV0oX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGNhbGwgYWNjZXB0IGhhbmRsZXJzXG5cdFx0XHRmb3IgKHZhciBvdXRkYXRlZE1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG5cdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8ob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG91dGRhdGVkTW9kdWxlSWQpKSB7XG5cdFx0XHRcdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1tvdXRkYXRlZE1vZHVsZUlkXTtcblx0XHRcdFx0XHRpZiAobW9kdWxlKSB7XG5cdFx0XHRcdFx0XHRtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9XG5cdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdFx0XHRcdFx0dmFyIGNhbGxiYWNrcyA9IFtdO1xuXHRcdFx0XHRcdFx0dmFyIGRlcGVuZGVuY2llc0ZvckNhbGxiYWNrcyA9IFtdO1xuXHRcdFx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdFx0XHR2YXIgZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2pdO1xuXHRcdFx0XHRcdFx0XHR2YXIgYWNjZXB0Q2FsbGJhY2sgPVxuXHRcdFx0XHRcdFx0XHRcdG1vZHVsZS5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcGVuZGVuY3ldO1xuXHRcdFx0XHRcdFx0XHRpZiAoYWNjZXB0Q2FsbGJhY2spIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoY2FsbGJhY2tzLmluZGV4T2YoYWNjZXB0Q2FsbGJhY2spICE9PSAtMSkgY29udGludWU7XG5cdFx0XHRcdFx0XHRcdFx0Y2FsbGJhY2tzLnB1c2goYWNjZXB0Q2FsbGJhY2spO1xuXHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY2llc0ZvckNhbGxiYWNrcy5wdXNoKGRlcGVuZGVuY3kpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRmb3IgKHZhciBrID0gMDsgayA8IGNhbGxiYWNrcy5sZW5ndGg7IGsrKykge1xuXHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdGNhbGxiYWNrc1trXS5jYWxsKG51bGwsIG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzKTtcblx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwiYWNjZXB0LWVycm9yZWRcIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG91dGRhdGVkTW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3lJZDogZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzW2tdLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyXG5cdFx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycik7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvYWQgc2VsZiBhY2NlcHRlZCBtb2R1bGVzXG5cdFx0XHRmb3IgKHZhciBvID0gMDsgbyA8IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5sZW5ndGg7IG8rKykge1xuXHRcdFx0XHR2YXIgaXRlbSA9IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlc1tvXTtcblx0XHRcdFx0dmFyIG1vZHVsZUlkID0gaXRlbS5tb2R1bGU7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0aXRlbS5yZXF1aXJlKG1vZHVsZUlkKTtcblx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBpdGVtLmVycm9ySGFuZGxlciA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRpdGVtLmVycm9ySGFuZGxlcihlcnIpO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyMikge1xuXHRcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yLWhhbmRsZXItZXJyb3JlZFwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVycjIsXG5cdFx0XHRcdFx0XHRcdFx0XHRvcmlnaW5hbEVycm9yOiBlcnJcblx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycjIpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycik7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG5cdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvcmVkXCIsXG5cdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnJcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb3V0ZGF0ZWRNb2R1bGVzO1xuXHRcdH1cblx0fTtcbn1cbl9fd2VicGFja19yZXF1aXJlX18uaG1ySS5qc29ucCA9IGZ1bmN0aW9uIChtb2R1bGVJZCwgYXBwbHlIYW5kbGVycykge1xuXHRpZiAoIWN1cnJlbnRVcGRhdGUpIHtcblx0XHRjdXJyZW50VXBkYXRlID0ge307XG5cdFx0Y3VycmVudFVwZGF0ZVJ1bnRpbWUgPSBbXTtcblx0XHRjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyA9IFtdO1xuXHRcdGFwcGx5SGFuZGxlcnMucHVzaChhcHBseUhhbmRsZXIpO1xuXHR9XG5cdGlmICghX193ZWJwYWNrX3JlcXVpcmVfXy5vKGN1cnJlbnRVcGRhdGUsIG1vZHVsZUlkKSkge1xuXHRcdGN1cnJlbnRVcGRhdGVbbW9kdWxlSWRdID0gX193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXTtcblx0fVxufTtcbl9fd2VicGFja19yZXF1aXJlX18uaG1yQy5qc29ucCA9IGZ1bmN0aW9uIChcblx0Y2h1bmtJZHMsXG5cdHJlbW92ZWRDaHVua3MsXG5cdHJlbW92ZWRNb2R1bGVzLFxuXHRwcm9taXNlcyxcblx0YXBwbHlIYW5kbGVycyxcblx0dXBkYXRlZE1vZHVsZXNMaXN0XG4pIHtcblx0YXBwbHlIYW5kbGVycy5wdXNoKGFwcGx5SGFuZGxlcik7XG5cdGN1cnJlbnRVcGRhdGVDaHVua3MgPSB7fTtcblx0Y3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MgPSByZW1vdmVkQ2h1bmtzO1xuXHRjdXJyZW50VXBkYXRlID0gcmVtb3ZlZE1vZHVsZXMucmVkdWNlKGZ1bmN0aW9uIChvYmosIGtleSkge1xuXHRcdG9ialtrZXldID0gZmFsc2U7XG5cdFx0cmV0dXJuIG9iajtcblx0fSwge30pO1xuXHRjdXJyZW50VXBkYXRlUnVudGltZSA9IFtdO1xuXHRjaHVua0lkcy5mb3JFYWNoKGZ1bmN0aW9uIChjaHVua0lkKSB7XG5cdFx0aWYgKFxuXHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiZcblx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSAhPT0gdW5kZWZpbmVkXG5cdFx0KSB7XG5cdFx0XHRwcm9taXNlcy5wdXNoKGxvYWRVcGRhdGVDaHVuayhjaHVua0lkLCB1cGRhdGVkTW9kdWxlc0xpc3QpKTtcblx0XHRcdGN1cnJlbnRVcGRhdGVDaHVua3NbY2h1bmtJZF0gPSB0cnVlO1xuXHRcdH1cblx0fSk7XG5cdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmYpIHtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmYuanNvbnBIbXIgPSBmdW5jdGlvbiAoY2h1bmtJZCwgcHJvbWlzZXMpIHtcblx0XHRcdGlmIChcblx0XHRcdFx0Y3VycmVudFVwZGF0ZUNodW5rcyAmJlxuXHRcdFx0XHQhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGN1cnJlbnRVcGRhdGVDaHVua3MsIGNodW5rSWQpICYmXG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpICYmXG5cdFx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSAhPT0gdW5kZWZpbmVkXG5cdFx0XHQpIHtcblx0XHRcdFx0cHJvbWlzZXMucHVzaChsb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCkpO1xuXHRcdFx0XHRjdXJyZW50VXBkYXRlQ2h1bmtzW2NodW5rSWRdID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG59O1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtck0gPSAoKSA9PiB7XG5cdGlmICh0eXBlb2YgZmV0Y2ggPT09IFwidW5kZWZpbmVkXCIpIHRocm93IG5ldyBFcnJvcihcIk5vIGJyb3dzZXIgc3VwcG9ydDogbmVlZCBmZXRjaCBBUElcIik7XG5cdHJldHVybiBmZXRjaChfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckYoKSkudGhlbigocmVzcG9uc2UpID0+IHtcblx0XHRpZihyZXNwb25zZS5zdGF0dXMgPT09IDQwNCkgcmV0dXJuOyAvLyBubyB1cGRhdGUgYXZhaWxhYmxlXG5cdFx0aWYoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZmV0Y2ggdXBkYXRlIG1hbmlmZXN0IFwiICsgcmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG5cdFx0cmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcblx0fSk7XG59O1xuXG4vLyBubyBkZWZlcnJlZCBzdGFydHVwXG5cbi8vIG5vIGpzb25wIGZ1bmN0aW9uXG5cbi8vIG5vIGRlZmVycmVkIHN0YXJ0dXAiLCIvLyBtb2R1bGUgY2FjaGUgYXJlIHVzZWQgc28gZW50cnkgaW5saW5pbmcgaXMgZGlzYWJsZWRcbi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDE5MzUpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==